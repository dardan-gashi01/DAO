var aa=Object.defineProperty,Zo=Object.defineProperties;var qo=Object.getOwnPropertyDescriptors;var ra=Object.getOwnPropertySymbols;var Qo=Object.prototype.hasOwnProperty,Ko=Object.prototype.propertyIsEnumerable;var gr=(o,t,e)=>t in o?aa(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,T=(o,t)=>{for(var e in t||(t={}))Qo.call(t,e)&&gr(o,e,t[e]);if(ra)for(var e of ra(t))Ko.call(t,e)&&gr(o,e,t[e]);return o},B=(o,t)=>Zo(o,qo(t)),c=(o,t)=>aa(o,"name",{value:t,configurable:!0}),oa=(o=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(o,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):o)(function(o){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var g=(o,t,e)=>(gr(o,typeof t!="symbol"?t+"":t,e),e);import"cross-fetch/polyfill";var E=class{constructor(t){this.contractWrapper=t}encode(t,e){return this.contractWrapper.readContract.interface.encodeFunctionData(t,e)}decode(t,e){return this.contractWrapper.readContract.interface.decodeFunctionData(t,e)}};c(E,"ContractEncoder");var A=class{constructor(t,e,r){this.contractWrapper=t,this.schema=e,this.storage=r}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),e=await this.storage.get(t);return this.parseOutputMetadata(e)}async set(t){let e=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[e]),data:this.get}}async update(t){return await this.set(T(T({},await this.get()),t))}async _parseAndUploadMetadata(t){let e=this.parseInputMetadata(t);return this.storage.uploadMetadata(e)}};c(A,"ContractMetadata");import{ethers as na}from"ethers";var sa={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"},ia=Object.keys(sa);function j(o){return o==="admin"?na.utils.hexZeroPad([0],32):na.utils.id(sa[o])}c(j,"getRoleHash");import te from"tiny-invariant";var ft=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};c(ft,"NotFoundError");var yr=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};c(yr,"InvalidAddressError");var me=class extends Error{constructor(t,e){super(`MISSING ROLE: ${t} does not have the '${e}' role`)}};c(me,"MissingRoleError");var wr=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};c(wr,"AssetNotFoundError");var de=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};c(de,"UploadError");var Cr=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};c(Cr,"FileNameMissingError");var le=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};c(le,"DuplicateFileNameError");var Sr=class extends Error{constructor(t,e,r){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${e} tokens. You have ${r} tokens available.`)}};c(Sr,"NotEnoughTokensError");var Tr=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};c(Tr,"MissingOwnerRoleError");var Wr=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};c(Wr,"QuantityAboveLimitError");var ue=class extends Error{constructor(t,e){super(`FETCH_FAILED: ${t}`),this.innerError=e}};c(ue,"FetchError");var he=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};c(he,"DuplicateLeafsError");var fe=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};c(fe,"AuctionAlreadyStartedError");var br=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};c(br,"FunctionDeprecatedError");var Ct=class extends Error{constructor(t,e){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}`)}};c(Ct,"ListingNotFoundError");var Ut=class extends Error{constructor(t,e,r,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}${a?` expected type: ${a}`:""}${r?` actual type: ${r}`:""}`)}};c(Ut,"WrongListingTypeError");var Ar=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};c(Ar,"RestrictedTransferError");var vr=class extends Error{constructor(t,e,r="Failed to execute transaction"){super(`${r}, admin role is missing${t?` on address: ${t}`:""}${e?` on contract: ${e}`:""}`)}};c(vr,"AdminRoleMissingError");var ge=class extends Error{constructor(t,e){super(`Auction has not ended yet${t?`, id: ${t}`:""}${e?`, end time: ${e.toString()}`:""}`)}};c(ge,"AuctionHasNotEndedError");var Ke=class extends Error{constructor(t,e,r,a,n,s,i){let p=`Contract transaction failed

`;p+=`Message: ${t}`,p+=`

| Transaction info |
`,p+=ce("from",e),p+=ce("to",r),p+=ce("data",a),p+=ce("chain",`${n.name} (${n.chainId})`);try{let m=new URL(s);p+=ce("RPC",m.hostname)}catch{}p+=`

`,p+="Need help with this error? Join our community: https://discord.gg/thirdweb",p+=`



`,p+="| Raw error |",p+=`

`,p+=i,super(p),this.reason=t,this.from=e,this.to=r,this.data=a,this.chain=n,this.rpcUrl=s}};c(Ke,"TransactionError");async function ca(o,t,e,r){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=pe(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=pe(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=pe(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),p=pe(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),m=pe(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return m===""&&(m=r),p===""&&(p=e),new Ke(n,p,m,s,t,i,a)}c(ca,"convertToTWError");function ce(o,t){if(t==="")return t;let e=Array(10-o.length).fill(" ").join("");return`
${o}:${e}${t}`}c(ce,"withSpaces");function pe(o,t){let e=t.match(o)||[],r="";return(e==null?void 0:e.length)>0&&(r+=e[1]),r}c(pe,"parseMessageParts");function Xt(o,t){return o&&o.toString().includes(t)||o.message&&o.message.toString().includes(t)||o.error&&o.error.toString().includes(t)}c(Xt,"includesErrorMessage");var O=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async getAll(){te(this.roles.length,"this contract has no support for roles");let t={};for(let e of this.roles)t[e]=await this.get(e);return t}async get(t){te(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=j(t),r=(await this.contractWrapper.readContract.getRoleMemberCount(e)).toNumber();return await Promise.all(Array.from(Array(r).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(e,a)))}async setAll(t){let e=Object.keys(t);te(e.length,"you must provide at least one role to set"),te(e.every(s=>this.roles.includes(s)),"this contract does not support the given role");let r=await this.getAll(),a=[],n=e.sort(s=>s==="admin"?1:-1);for(let s=0;s<n.length;s++){let i=n[s],p=t[i]||[],m=r[i]||[],d=p.filter(f=>!m.includes(f)),l=m.filter(f=>!p.includes(f));if(d.length&&d.forEach(f=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[j(i),f]))}),l.length)for(let f=0;f<l.length;f++){let y=l[f],W=await this.getRevokeRoleFunctionName(y);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(W,[j(i),y]))}}return{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,e){await Promise.all(t.map(async r=>{if(!(await this.get(r)).map(n=>n.toLowerCase()).includes(e.toLowerCase()))throw new me(e,r)}))}async grant(t,e){return te(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[j(t),e])}}async revoke(t,e){te(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await this.getRevokeRoleFunctionName(e);return{receipt:await this.contractWrapper.sendTransaction(r,[j(t),e])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};c(O,"ContractRoles");import{BigNumber as xr}from"ethers";import{isAddress as Jo}from"ethers/lib/utils";import{z as S}from"zod";var It=c(()=>typeof window<"u","isBrowser");globalThis.File||(globalThis.File=oa("@web-std/file").File);var Pr=1e4,Yo=It()?[S.instanceof(File),S.string()]:[S.instanceof(Buffer),S.string()],_t=S.union(Yo),pa=S.union([S.array(S.number()),S.string()]),b=S.union([S.string(),S.number(),S.bigint(),S.instanceof(xr)]).transform(o=>xr.from(o)),St=b.transform(o=>o.toString()),Ot=S.number().max(Pr,"Cannot exeed 100%").min(0,"Cannot be below 0%"),ma=S.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Xo=S.union([S.string(),S.number(),S.boolean(),S.null()]),xt=S.lazy(()=>S.union([Xo,S.array(xt),S.record(xt)])),da=S.record(xt),la=S.union([S.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),S.string().length(0)]),nt=S.string().refine(o=>Jo(o),o=>({message:`${o} is not a valid address`})),Y=S.union([S.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),S.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),ua=S.date().transform(o=>xr.from(Math.floor(o.getTime()/1e3))),Je=ua.default(new Date),ha=ua.default(new Date(Date.now()+1e3*60*60*24*365*10));import{AddressZero as Ia}from"@ethersproject/constants";import{z as ct}from"zod";import{z as Pt}from"zod";import{BigNumber as rn}from"ethers";import{hexZeroPad as an}from"ethers/lib/utils";var w;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(w||(w={}));var fa=[w.Mainnet,w.Rinkeby,w.Goerli,w.Polygon,w.Mumbai,w.Fantom,w.FantomTestnet,w.Avalanche,w.AvalancheFujiTestnet];var Dt="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",tn={[w.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[w.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[w.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[w.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[w.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[w.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[w.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[w.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[w.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[w.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function ga(o){return tn[o]}c(ga,"getNativeTokenByChainId");import{z as ye}from"zod";var en=ye.object({name:ye.string(),symbol:ye.string(),decimals:ye.number()}),ya=en.extend({value:b,displayValue:ye.string()});import{z as tt}from"zod";var dt=tt.object({merkle:tt.record(tt.string()).default({})}),Er=tt.object({address:nt,maxClaimable:Y.default(0)}),ee=tt.union([tt.array(tt.string()).transform(o=>o.map(t=>Er.parse({address:t}))),tt.array(Er)]),we=tt.object({merkleRoot:tt.string(),claims:tt.array(Er.extend({proof:tt.array(tt.string())}))}),Gi=tt.object({merkleRoot:tt.string(),snapshotUri:tt.string(),snapshot:we});var Ce=Pt.object({startTime:Je,currencyAddress:Pt.string().default(Dt),price:Y.default(0),maxQuantity:Pt.union([Y,Pt.literal("unlimited")]).default("unlimited"),quantityLimitPerTransaction:Pt.union([Y,Pt.literal("unlimited")]).default("unlimited"),waitInSeconds:St.default(0),merkleRootHash:pa.default(an([0],32)),snapshot:Pt.optional(ee)}),wa=Pt.array(Ce),Yi=Ce.partial(),kr=Ce.extend({availableSupply:Pt.string().default(""),currencyMetadata:ya.default({value:rn.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:b,maxQuantity:b,quantityLimitPerTransaction:b,waitInSeconds:b,startTime:b.transform(o=>new Date(o.toNumber()*1e3))});import{z as Vt}from"zod";import{z as Tt}from"zod";import{z as $t}from"zod";var Ca=xt.or(_t),on=$t.union([$t.array($t.object({key:$t.string(),value:Ca})).superRefine((o,t)=>{if(!o)return;let e={};o.forEach(({key:r},a)=>{e[r]||(e[r]=0),e[r]++,e[r]>1&&t.addIssue({code:$t.ZodIssueCode.custom,message:`Duplicate key: ${r}`,path:[a,"key"]})})}),$t.record(Ca)]).optional(),Sa=$t.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(e=>e.value):t},on).transform(o=>Array.isArray(o)?o.reduce((t,e)=>B(T({},t),{[e.key]:e.value}),{}):o),Ta=da.optional();var Wa=Tt.object({name:Tt.string().nonempty({message:"A name is required."}),description:Tt.string().optional(),image:_t.optional(),external_url:_t.optional()}).catchall(Tt.lazy(()=>xt)),nn=Wa.extend({id:b,uri:Tt.string(),image:Tt.string().optional(),external_url:Tt.string().optional()}),it=Wa.extend({animation_url:_t.optional(),background_color:la.optional(),properties:Sa}),Ye=Tt.union([it,Tt.string()]),Xe=nn.extend({animation_url:Tt.string().optional(),properties:Ta});import{AddressZero as Rr}from"@ethersproject/constants";import{ethers as pn}from"ethers";import{v4 as sn}from"uuid";import{hexlify as ba,toUtf8Bytes as cn}from"ethers/lib/utils";function Aa(o){if(o===void 0){let t=Buffer.alloc(16);return sn({},t),ba(cn(t.toString("hex")))}else return ba(o)}c(Aa,"resolveOrGenerateId");var va=Vt.object({to:Vt.string().default(Rr),price:Y.default(0),currencyAddress:Vt.string().default(Dt),mintStartTime:Je,mintEndTime:ha,uid:Vt.string().optional().transform(o=>Aa(o)),primarySaleRecipient:Vt.string().default(Rr)}),Fr=va.extend({quantity:Y}),xa=Fr.extend({mintStartTime:b,mintEndTime:b}),tr=va.extend({metadata:Ye,royaltyRecipient:Vt.string().default(Rr),royaltyBps:Ot.default(0)}),Ir=tr.extend({uri:Vt.string(),royaltyBps:b,mintStartTime:b,mintEndTime:b}),Pa=tr.extend({tokenId:St.default(pn.constants.MaxUint256),quantity:St}),Ea=Ir.extend({tokenId:b,quantity:b}),ka=[{name:"to",type:"address"},{name:"primarySaleRecipient",type:"address"},{name:"quantity",type:"uint256"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],Ra=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],Fa=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var v=ct.object({name:ct.string(),description:ct.string().optional(),image:_t.optional(),external_link:ct.string().url().optional()}),I=v.extend({image:ct.string().optional()}).catchall(ct.lazy(()=>xt)),x=ct.object({seller_fee_basis_points:Ot.default(0),fee_recipient:nt.default(Ia)}),st=ct.object({primary_sale_recipient:nt}),k=ct.object({platform_fee_basis_points:Ot.default(0),platform_fee_recipient:nt.default(Ia)}),_=ct.object({trusted_forwarders:ct.array(nt).default([])}),D=ct.object({symbol:ct.string().optional().default("")});var et=class{constructor(t,e){this.contractWrapper=t,this.metadata=e}async getDefaultRoyaltyInfo(){let[t,e]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return x.parse({fee_recipient:t,seller_fee_basis_points:e})}async getTokenRoyaltyInfo(t){let[e,r]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return x.parse({fee_recipient:e,seller_fee_basis_points:r})}async setDefaultRoyaltyInfo(t){let e=await this.metadata.get(),r=this.metadata.parseInputMetadata(T(T({},e),t)),a=await this.metadata._parseAndUploadMetadata(r),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[r.fee_recipient,r.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,e){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,e.fee_recipient,e.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};c(et,"ContractRoyalty");var rt=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};c(rt,"ContractPrimarySale");import{DropERC20__factory as is,IERC20__factory as cs}from"@thirdweb-dev/contracts";import{BigNumber as jr,ethers as ho}from"ethers";import{AddressZero as In}from"@ethersproject/constants";import{BigNumber as gt,Contract as Rn,ethers as bt}from"ethers";import{JsonRpcBatchProvider as mn,Provider as dn,WebSocketProvider as ln}from"@ethersproject/providers";import{ethers as We,Signer as Or}from"ethers";import{EventEmitter2 as un}from"eventemitter2";import{AddressZero as er}from"@ethersproject/constants";var Se="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",Et="0x7c487845f98938Bb955B1D5AD069d9a30e4131fd",kt="0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65",_r={[w.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:kt,twRegistry:Et},[w.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:kt,twRegistry:Et},[w.Goerli]:{biconomyForwarder:er,twFactory:kt,twRegistry:Et},[w.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:kt,twRegistry:Et},[w.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:kt,twRegistry:Et},[w.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:kt,twRegistry:Et},[w.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:kt,twRegistry:Et},[w.Fantom]:{biconomyForwarder:er,twFactory:kt,twRegistry:Et},[w.FantomTestnet]:{biconomyForwarder:er,twFactory:kt,twRegistry:Et}};function Te(o,t){return o===w.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:er:_r[o][t]}c(Te,"getContractAddressByChainId");import{z as X}from"zod";var lt=X.object({readonlySettings:X.object({rpcUrl:X.string().url(),chainId:X.number().optional()}).optional(),gasSettings:X.object({maxPriceInGwei:X.number().min(1,"gas price cannot be less than 1").default(300),speed:X.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:X.union([X.object({openzeppelin:X.object({relayerUrl:X.string().url(),relayerForwarderAddress:X.string().default(Se)})}),X.object({biconomy:X.object({apiId:X.string(),apiKey:X.string(),deadlineSeconds:X.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var Rt=class extends un{constructor(t,e){super();let[r,a]=this.getSignerAndProvider(t,e);this.signer=r,this.provider=a;try{this.options=lt.parse(e)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=lt.parse({})}}updateSignerOrProvider(t){let[e,r]=this.getSignerAndProvider(t,this.options);this.signer=e,this.provider=r}isReadOnly(){return!Or.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,e){var n;let r,a;return Or.isSigner(t)&&(r=t,t.provider&&(a=t.provider)),e!=null&&e.readonlySettings&&(a=this.getReadOnlyProvider(e.readonlySettings.rpcUrl,e.readonlySettings.chainId)),a||(dn.isProvider(t)?a=t:Or.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=e==null?void 0:e.readonlySettings)==null?void 0:n.chainId):a=We.getDefaultProvider(t))),a||(a=We.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[r,a]}getReadOnlyProvider(t,e){try{let r=t.match(/^(ws|http)s?:/i);if(r)switch(r[1]){case"http":return new mn(t,e);case"ws":return new ln(t,e);default:return We.getDefaultProvider(t)}else return We.getDefaultProvider(t)}catch{return We.getDefaultProvider(t)}}};c(Rt,"RPCConnectionHandler");var Wt;(function(o){o.Transaction="transaction",o.Signature="signature"})(Wt||(Wt={}));import ae from"tiny-invariant";import{BigNumber as Dr}from"ethers";var Oa=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],Da=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],re={},_a={};async function Nr(o,t,e){let r=e.join("|"),a=_a[r],n=Date.now()-a>=2e3;if(!(r in re)||n){let i=await o.functions[t](...e);Array.isArray(i)&&i.length>0?re[r]=Dr.from(i[0]):re[r]=Dr.from(i),_a[r]=Date.now()}let s=re[r];return re[r]=Dr.from(re[r]).add(1),s}c(Nr,"getAndIncrementNonce");import{Forwarder__factory as Fn}from"@thirdweb-dev/contracts";import{BigNumber as hn,Contract as Lr,ethers as Mr}from"ethers";import{ethers as Br}from"ethers";async function be(o,t,e,r){var i,p;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=Br.utils._TypedDataEncoder.getPayload(t,e,r),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,e,r)}catch(m){if((p=m==null?void 0:m.message)!=null&&p.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw m}return{payload:n,signature:Br.utils.joinSignature(Br.utils.splitSignature(s))}}c(be,"signTypedDataInternal");var fn=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],gn=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],yn=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function wn(o,t){let e=new Lr(t,yn,o);try{return await e.nonces(await o.getAddress())}catch{return await e.getNonce(await o.getAddress())}}c(wn,"getSignerNonce");async function Cn(o,t){let e=new Lr(t,gn,o);try{return await e.DOMAIN_SEPARATOR()}catch{return await e.getDomainSeperator()}}c(Cn,"getDomainSeperator");async function Sn(o,t){return new Lr(t,fn,o).name()}c(Sn,"getTokenName");async function Tn(o,t){let e=await Cn(o,t.verifyingContract),r={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:Mr.utils.hexZeroPad(hn.from(t.chainId).toHexString(),32)};return Mr.utils._TypedDataEncoder.hashDomain(r)===e?r:t}c(Tn,"getChainDomainSeperator");async function Na(o,t,e,r,a,n,s){let i=await Tn(o,{name:await Sn(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await wn(o,t)).toString(),n=n!=null?n:Mr.constants.MaxUint256;let p={owner:e,spender:r,value:a,nonce:s,deadline:n},m={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:d}=await be(o,i,m,p);return{message:p,signature:d}}c(Na,"signEIP2612Permit");import{ethers as Ur}from"ethers";function Wn(o){switch(o){case w.Polygon:return"https://gasstation-mainnet.matic.network/v2";case w.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}c(Wn,"getGasStationUrl");var bn=Ur.utils.parseUnits("31","gwei"),An=Ur.utils.parseUnits("1","gwei");function vn(o){switch(o){case w.Polygon:return bn;case w.Mumbai:return An}}c(vn,"getDefaultGasFee");async function Ba(o){let t=Wn(o);try{let r=(await(await fetch(t)).json()).standard.maxPriorityFee;if(r>0){let a=parseFloat(r).toFixed(9);return Ur.utils.parseUnits(a,"gwei")}}catch(e){console.error("failed to fetch gas",e)}return vn(o)}c(Ba,"getPolygonGasPriorityFee");import{ethers as Ae}from"ethers";var ve={[w.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:Ae.utils.parseEther("0.0001")},[w.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:Ae.utils.parseEther("0.0001")},[w.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:Ae.utils.parseEther("0.1")},[w.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:Ae.utils.parseEther("2")},[w.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:Ae.utils.parseEther("0.0001")}};import{arrayify as Ma}from"ethers/lib/utils";var Gt=Ma("0x80ac58cd"),zt=Ma("0xd9b67a26");var La="https://gateway.ipfscdn.io/ipfs/",Ua="https://upload.nftlabs.co",$a="https://api.pinata.cloud/pinning/pinFileToIPFS";import xn from"merkletreejs";import Pn from"keccak256";import{BigNumber as En,ethers as Va}from"ethers";async function Ga(o,t,e){let r=ee.parse(o),a=r.map(d=>d.address);if(new Set(a).size<a.length)throw new he;let s=r.map(d=>kn(d.address,Va.utils.parseUnits(d.maxClaimable,t))),i=new xn(s,Pn,{sort:!0}),p=we.parse({merkleRoot:i.getHexRoot(),claims:r.map((d,l)=>{let f=i.getHexProof(s[l]);return{address:d.address,maxClaimable:d.maxClaimable,proof:f}})}),m=await e.uploadMetadata(p);return{merkleRoot:i.getHexRoot(),snapshotUri:m,snapshot:p}}c(Ga,"createSnapshot");function kn(o,t){return Va.utils.solidityKeccak256(["address","uint256"],[o,En.from(t)])}c(kn,"hashLeafNode");var C=class extends Rt{customOverrides=()=>({});constructor(t,e,r,a){super(t,a),this.writeContract=new Rn(e,r,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:e}=await t.getNetwork();return e}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){if(It())return{};let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let r=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:bt.utils.parseUnits("1","gwei"),s;r===w.Mumbai||r===w.Polygon?s=await Ba(r):s=gt.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a;switch(e){case"standard":a=gt.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=bt.utils.parseUnits(r.toString(),"gwei"),i=bt.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(e){case"standard":n=gt.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=bt.utils.parseUnits(r.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,e){this.emit(Wt.Transaction,{status:t,transactionHash:e})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,e){return this.writeContract.estimateGas[t](...e)}withTransactionOverride(t){this.customOverrides=t}async sendTransaction(t,e,r){var a;if(r||(r=await this.getCallOverrides()),r=T(T({},r),this.customOverrides()),this.customOverrides=()=>({}),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,e,r);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,e,r);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,e,r){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...e,r)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),p=await this.readContract.address;throw await ca(n,s,i,p)}}async sendGaslessTransaction(t,e=[],r){let a=this.getSigner();ae(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,p=(r==null?void 0:r.value)||0;if(gt.from(p).gt(0))throw new Error("Cannot send native token value with gasless transaction");let m=this.writeContract.interface.encodeFunctionData(t,e),d=await this.writeContract.estimateGas[t](...e),l=d.mul(2);d.lt(25e3)&&(l=gt.from(5e5));let f={from:s,to:i,data:m,chainId:n,gasLimit:l,functionName:t.toString(),functionArgs:e,callOverrides:r};return await this.defaultGaslessSendFunction(f)}async signTypedData(t,e,r,a){this.emit(Wt.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await be(t,e,r,a);return this.emit(Wt.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,e){if(!e||e.length===0)return[];let r=this.writeContract.interface.getEventTopic(t);return e.filter(n=>n.topics.indexOf(r)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var l,f;ae(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();ae(e&&r,"signer and provider must be set");let a=new bt.Contract(Te(t.chainId,"biconomyForwarder"),Da,r),n=0,s=await Nr(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:bt.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((l=this.options)==null?void 0:l.gasless)&&"biconomy"in this.options.gasless&&((f=this.options.gasless.biconomy)==null?void 0:f.deadlineSeconds)||3600)),data:t.data},p=bt.utils.arrayify(bt.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,bt.utils.keccak256(i.data)]));this.emit(Wt.Signature,{status:"submitted",message:p,signature:""});let m=await e.signMessage(p);this.emit(Wt.Signature,{status:"completed",message:p,signature:m});let d=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,m],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(d.ok){let y=await d.json();if(!y.txHash)throw new Error(`relay transaction failed: ${y.log}`);return y.txHash}throw new Error(`relay transaction failed with status: ${d.status} (${d.statusText})`)}async defenderSendFunction(t){ae(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();ae(e,"provider is not set"),ae(r,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=Fn.connect(a,r),s=await Nr(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},p={ForwardRequest:Oa},m={from:t.from,to:t.to,value:gt.from(0).toString(),gas:gt.from(t.gasLimit).toString(),nonce:gt.from(s).toString(),data:t.data},d;if(this.emit(Wt.Signature,{status:"submitted",message:m,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let W=t.functionArgs[0],wt=t.functionArgs[1],{message:ht,signature:mt}=await Na(e,this.writeContract.address,t.from,W,wt),{r:zo,s:jo,v:Ho}=bt.utils.splitSignature(mt);m={to:this.readContract.address,owner:ht.owner,spender:ht.spender,value:gt.from(ht.value).toString(),nonce:gt.from(ht.nonce).toString(),deadline:gt.from(ht.deadline).toString(),r:zo,s:jo,v:Ho},d=mt}else{let{signature:W}=await be(e,i,p,m);d=W}let l="forward";m!=null&&m.owner&&(l="permit");let f=JSON.stringify({request:m,signature:d,type:l});this.emit(Wt.Signature,{status:"completed",message:m,signature:d});let y=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:f});if(y.ok){let W=await y.json();return JSON.parse(W.result).txHash}throw new Error(`relay transaction failed with status: ${y.status} (${y.statusText})`)}};c(C,"ContractWrapper");import{BigNumber as $r,ethers as _n}from"ethers";import{IERC20__factory as za,TokenERC20__factory as On}from"@thirdweb-dev/contracts";import{formatUnits as Dn}from"ethers/lib/utils";function At(o){return o.toLowerCase()===Dt||o.toLowerCase()===In}c(At,"isNativeToken");async function at(o,t,e){let r=await Nt(o,e);return _n.utils.parseUnits(Y.parse(t),r.decimals)}c(at,"normalizePriceValue");async function Nt(o,t){if(At(t)){let e=await o.getNetwork(),r=ga(e.chainId);return{name:r.name,symbol:r.symbol,decimals:r.decimals}}else{let e=On.connect(t,o),[r,a,n]=await Promise.all([e.name(),e.symbol(),e.decimals()]);return{name:r,symbol:a,decimals:n}}}c(Nt,"fetchCurrencyMetadata");async function L(o,t,e){let r=await Nt(o,t);return B(T({},r),{value:$r.from(e),displayValue:Dn(e,r.decimals)})}c(L,"fetchCurrencyValue");async function yt(o,t,e,r){if(At(e))r.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new C(a||n,e,za.abi,{}),i=await o.getSignerAddress(),p=o.readContract.address;return(await s.readContract.allowance(i,p)).lt(t)&&await s.sendTransaction("approve",[p,t]),r}}c(yt,"setErc20Allowance");async function ja(o,t,e,r){let a=o.getSigner(),n=o.getProvider(),s=new C(a||n,t,za.abi,{}),i=await o.getSignerAddress(),p=o.readContract.address,m=await s.readContract.allowance(i,p),d=$r.from(e).mul($r.from(r));m.lt(d)&&await s.sendTransaction("approve",[p,m.add(d)])}c(ja,"approveErc20Allowance");import ps from"deep-equal";var H;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})(H||(H={}));var Ha;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(Ha||(Ha={}));var oe;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})(oe||(oe={}));var P;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(P||(P={}));import{BigNumber as Bt,ethers as ut}from"ethers";import{hexZeroPad as Bn}from"@ethersproject/bytes";import{AddressZero as Za}from"@ethersproject/constants";function vt(o,t){return Nn(o.readContract,t)}c(vt,"implementsInterface");function Nn(o,t){let e=o.interface.functions,r=t.functions;return Object.keys(e).filter(a=>a in r).length===Object.keys(r).length}c(Nn,"matchesInterface");import{DropERC20__factory as Mn}from"@thirdweb-dev/contracts";async function ne(o,t,e,r,a,n=[Bn([0],32)]){let s=await r.getSignerAddress(),i=0;vt(r,Mn.createInterface())&&(i=await r.readContract.decimals());let p=Bt.from(0);try{if(!t.merkleRootHash.toString().startsWith(Za)){let f=await Vr(t.merkleRootHash.toString(),e,a),y=f&&f.find(W=>W.address.toLowerCase()===s.toLowerCase());if(y===void 0)throw new Error("No claim found for this address");n=y.proof,p=ut.utils.parseUnits(y.maxClaimable,i)}}catch(f){if((f==null?void 0:f.message)==="No claim found for this address")throw f;console.warn("failed to check claim condition merkle root hash, continuing anyways",f)}let m=await r.getCallOverrides()||{},d=t.price,l=t.currencyAddress;return d.gt(0)&&(At(l)?m.value=Bt.from(d).mul(o):await ja(r,l,d,o)),{overrides:m,proofs:n,maxQuantityPerTransaction:p,price:d,currencyAddress:l}}c(ne,"prepareClaim");async function Vr(o,t,e){let r=t[o],a;if(r){let n=await e.get(r),s=we.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}c(Vr,"fetchSnapshot");async function rr(o,t,e,r){if(o>=e.length)throw Error(`Index out of bounds - got index: ${o} with ${e.length} conditions`);let a=c(l=>l.toHexString()===ut.constants.MaxUint256.toHexString()?"unlimited":ut.utils.formatUnits(l,r).replace(".0",""),"revertToFormattedAmount"),n=c(l=>l==="unlimited"?ut.constants.MaxUint256:ut.utils.parseUnits(l,r),"convertBackToBigNumber"),s=e[o].currencyMetadata.decimals,i=e[o].price,p=ut.utils.formatUnits(i,s),m=Ce.parse(T(B(T({},e[o]),{price:p,maxQuantity:a(e[o].maxQuantity),quantityLimitPerTransaction:a(e[o].quantityLimitPerTransaction)}),t)),d=kr.parse(B(T({},m),{price:i,maxQuantity:n(m.maxQuantity),quantityLimitPerTransaction:n(m.quantityLimitPerTransaction)}));return e.map((l,f)=>{let y;f===o?y=d:y=l;let W=ut.utils.formatUnits(y.price,s);return B(T({},y),{price:W,maxQuantity:a(y.maxQuantity),quantityLimitPerTransaction:a(y.quantityLimitPerTransaction)})})}c(rr,"updateExistingClaimConditions");async function ar(o,t,e,r,a){let n=await Vr(t,r,a);if(n===void 0)return{proof:[],maxClaimable:Bt.from(0)};let s=n.find(i=>i.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return s===void 0?{proof:[],maxClaimable:Bt.from(0)}:{proof:s.proof,maxClaimable:ut.utils.parseUnits(s.maxClaimable,e)}}c(ar,"getClaimerProofs");async function or(o,t,e,r){let a=[],n=await Promise.all(o.map(async p=>{if(p.snapshot){let m=await Ga(ee.parse(p.snapshot),t,r);a.push(m),p.merkleRootHash=m.merkleRoot}return p})),s=wa.parse(n),i=(await Promise.all(s.map(p=>Ln(p,t,e)))).sort((p,m)=>{let d=Bt.from(p.startTimestamp),l=Bt.from(m.startTimestamp);return d.eq(l)?0:d.gt(l)?1:-1});return{snapshotInfos:a,sortedConditions:i}}c(or,"processClaimConditionInputs");async function Ln(o,t,e){let r=o.currencyAddress===Za?Dt:o.currencyAddress,a,n;return o.maxQuantity==="unlimited"?a=ut.constants.MaxUint256.toString():a=ut.utils.parseUnits(o.maxQuantity,t),o.quantityLimitPerTransaction==="unlimited"?n=ut.constants.MaxUint256.toString():n=ut.utils.parseUnits(o.quantityLimitPerTransaction,t),{startTimestamp:o.startTime,maxClaimableSupply:a,supplyClaimed:0,quantityLimitPerTransaction:n,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await at(e,o.price,r),currency:r,merkleRoot:o.merkleRootHash}}c(Ln,"convertToContractModel");async function se(o,t,e,r){let a=await L(t,o.currency,o.pricePerToken),n=await Vr(o.merkleRoot,e,r);return kr.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:Bt.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:Bt.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}c(se,"transformResultToClaimCondition");import{MaxUint256 as ms}from"@ethersproject/constants";var qa=v.merge(x).merge(dt).merge(D),Un=I.merge(x).merge(dt).merge(D),$n=qa.merge(k).merge(st).merge(_),Qa={deploy:$n,output:Un,input:qa};var Ka=v.merge(x).merge(dt).merge(D),Vn=I.merge(x).merge(dt).merge(D),Gn=Ka.merge(k).merge(st).merge(_),Ja={deploy:Gn,output:Vn,input:Ka};var Ya=v,zn=I,jn=Ya.merge(k).merge(_),Xa={deploy:jn,output:zn,input:Ya};var to=v.merge(x).merge(D),Hn=I.merge(x).merge(D),Zn=to.merge(k).merge(_),eo={deploy:Zn,output:Hn,input:to};import{z as ie}from"zod";var ro=ie.object({address:nt,sharesBps:Ot.gt(0,"Shares must be greater than 0")}),qn=ro.extend({address:nt,sharesBps:Ot}),Gr=v.extend({recipients:ie.array(ro).default([]).superRefine((o,t)=>{let e={},r=0;for(let a=0;a<o.length;a++){let n=o[a];e[n.address]&&t.addIssue({code:ie.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),e[n.address]=!0,r+=n.sharesBps,r>1e4&&t.addIssue({code:ie.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}r!==1e4&&t.addIssue({code:ie.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${r/100}%`,path:[]})})}),Qn=I.extend({recipients:ie.array(qn)}),Kn=Gr.merge(k).merge(Gr).merge(_),ao={deploy:Kn,output:Qn,input:Gr};var oo=v.merge(D),Jn=I.merge(D),Yn=oo.merge(k).merge(st).merge(_),no={deploy:Yn,output:Jn,input:oo};var so=v.merge(x).merge(D),Xn=I.merge(x).merge(D),ts=so.merge(k).merge(st).merge(_),io={deploy:ts,output:Xn,input:so};var co=v.merge(x),es=I.merge(x),rs=co.merge(k).merge(st).merge(_),po={deploy:rs,output:es,input:co};import{z as pt}from"zod";var mo=pt.object({voting_delay_in_blocks:pt.number().min(0).default(0),voting_period_in_blocks:pt.number().min(1).default(1),voting_token_address:nt,voting_quorum_fraction:ma.default(0),proposal_token_threshold:St.default(1)}),as=mo.extend({proposal_token_threshold:b}),lo=v.merge(mo),os=I.merge(as),ns=lo.merge(_),uo={deploy:ns,output:os,input:lo},gm=pt.object({proposalId:b,proposer:pt.string(),targets:pt.array(pt.string()),values:pt.array(b),signatures:pt.array(pt.string()),calldatas:pt.array(pt.string()),startBlock:b,endBlock:b,description:pt.string()});import{z as nr}from"zod";var zr=nr.object({supply:b,metadata:Xe}),Tm=zr.extend({owner:nr.string(),quantityOwned:b}),Wm=nr.object({supply:St,metadata:it}),bm=nr.object({supply:St,metadata:Ye});import{z as ss}from"zod";var Pm=ss.object({toAddress:nt,amount:Y});var jt=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),e=await this.contractWrapper.readContract.getClaimConditionById(t),r=await this.metadata.get();return await se(e,this.contractWrapper.getProvider(),r.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),e=t.currentStartId.toNumber(),r=t.count.toNumber(),a=[];for(let s=e;s<e+r;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>se(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e)).length===0}async getClaimIneligibilityReasons(t,e){let r=[],a,n,s=ho.utils.parseUnits(Y.parse(t),await this.getTokenDecimals());e===void 0&&(e=await this.contractWrapper.getSignerAddress());try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(l){return Xt(l,"no public mint condition.")?(r.push(P.NoClaimConditionSet),r):Xt(l,"no active mint condition.")?(r.push(P.NoActiveClaimPhase),r):(r.push(P.Unknown),r)}if(jr.from(n.availableSupply).lt(s)&&r.push(P.NotEnoughSupply),ho.utils.stripZeros(n.merkleRootHash).length>0){let l=n.merkleRootHash.toString(),f=await this.metadata.get(),y=await ar(e,l,await this.getTokenDecimals(),f.merkle,this.storage);try{let[W]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,e,t,y.proof,y.maxClaimable);if(!W)return r.push(P.AddressNotAllowed),r}catch{return r.push(P.AddressNotAllowed),r}}let[p,m]=await this.contractWrapper.readContract.getClaimTimestamp(a,e),d=jr.from(Date.now()).div(1e3);if(p.gt(0)&&d.lt(m)&&(m.eq(ms)?r.push(P.AlreadyClaimed):r.push(P.WaitBeforeNextClaimTransaction)),n.price.gt(0)&&!It()){let l=n.price.mul(jr.from(t)),f=this.contractWrapper.getProvider();At(n.currencyAddress)?(await f.getBalance(e)).lt(l)&&r.push(P.NotEnoughTokens):(await new C(f,n.currencyAddress,cs.abi,{}).readContract.balanceOf(e)).lt(l)&&r.push(P.NotEnoughTokens)}return r}async set(t,e=!1){let{snapshotInfos:r,sortedConditions:a}=await or(t,await this.getTokenDecimals(),this.contractWrapper.getProvider(),this.storage),n={};r.forEach(p=>{n[p.merkleRoot]=p.snapshotUri});let s=await this.metadata.get(),i=[];if(!ps(s.merkle,n)){let p=this.metadata.parseInputMetadata(B(T({},s),{merkle:n})),m=await this.metadata._parseAndUploadMetadata(p);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,e])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,e){let r=await this.getAll(),a=await rr(t,e,r,await this.getTokenDecimals());return await this.set(a)}async getTokenDecimals(){return vt(this.contractWrapper,is.createInterface())?this.contractWrapper.readContract.decimals():Promise.resolve(0)}};c(jt,"DropClaimConditions");import{IERC20__factory as ds}from"@thirdweb-dev/contracts";import{BigNumber as fo,ethers as ls}from"ethers";import us from"deep-equal";import{MaxUint256 as hs}from"@ethersproject/constants";var xe=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(t){let e=await this.contractWrapper.readContract.getActiveClaimConditionId(t),r=await this.contractWrapper.readContract.getClaimConditionById(t,e),a=await this.metadata.get();return await se(r,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let e=await this.contractWrapper.readContract.claimCondition(t),r=e.currentStartId.toNumber(),a=e.count.toNumber(),n=[];for(let i=r;i<r+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>se(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,e,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e,r)).length===0}async getClaimIneligibilityReasons(t,e,r){let a=[],n,s;r===void 0&&(r=await this.contractWrapper.getSignerAddress());try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(l){return Xt(l,"no public mint condition.")?(a.push(P.NoClaimConditionSet),a):Xt(l,"no active mint condition.")?(a.push(P.NoActiveClaimPhase),a):(a.push(P.Unknown),a)}if(fo.from(s.availableSupply).lt(e)&&a.push(P.NotEnoughSupply),ls.utils.stripZeros(s.merkleRootHash).length>0){let l=s.merkleRootHash.toString(),f=await this.metadata.get(),y=await ar(r,l,0,f.merkle,this.storage);try{let[W]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,r,t,e,y.proof,y.maxClaimable);if(!W)return a.push(P.AddressNotAllowed),a}catch{return a.push(P.AddressNotAllowed),a}}let[p,m]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,r),d=fo.from(Date.now()).div(1e3);if(p.gt(0)&&d.lt(m)&&(m.eq(hs)?a.push(P.AlreadyClaimed):a.push(P.WaitBeforeNextClaimTransaction)),s.price.gt(0)&&!It()){let l=s.price.mul(e),f=this.contractWrapper.getProvider();At(s.currencyAddress)?(await f.getBalance(r)).lt(l)&&a.push(P.NotEnoughTokens):(await new C(f,s.currencyAddress,ds.abi,{}).readContract.balanceOf(r)).lt(l)&&a.push(P.NotEnoughTokens)}return a}async set(t,e,r=!1){let{snapshotInfos:a,sortedConditions:n}=await or(e,0,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(m=>{s[m.merkleRoot]=m.snapshotUri});let i=await this.metadata.get(),p=[];for(let m of Object.keys(i.merkle))s[m]=i.merkle[m];if(!us(i.merkle,s)){let m=this.metadata.parseInputMetadata(B(T({},i),{merkle:s})),d=await this.metadata._parseAndUploadMetadata(m);p.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return p.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,r])),{receipt:await this.contractWrapper.multiCall(p)}}async update(t,e,r){let a=await this.getAll(t),n=await rr(e,r,a,0);return await this.set(t,n)}};c(xe,"DropErc1155ClaimConditions");import{BigNumber as fs}from"ethers";var Pe=class{constructor(t){this.contractWrapper=t}async getAllClaimerAddresses(t){let e=await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.TokensClaimed(null,fs.from(t)));return Array.from(new Set(e.map(r=>r.args.claimer)))}};c(Pe,"DropErc1155History");import{BigNumber as gs,ethers as ys}from"ethers";import{AddressZero as ws}from"@ethersproject/constants";var Ht=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=lt.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=lt.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await Nt(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,e){return await this.getValue(await this.contractWrapper.readContract.allowance(t,e))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(j("transfer"),ws)}async transfer(t,e){return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,await this.normalizeAmount(e)])}}async transferFrom(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,e,await this.normalizeAmount(r)])}}async setAllowance(t,e){return{receipt:await this.contractWrapper.sendTransaction("approve",[t,await this.normalizeAmount(e)])}}async transferBatch(t){let e=await Promise.all(t.map(async r=>{let a=await this.normalizeAmount(r.amount);return this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[r.toAddress,a])}));await this.contractWrapper.multiCall(e)}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[await this.normalizeAmount(t)])}}async burnFrom(t,e){return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,await this.normalizeAmount(e)])}}async getValue(t){return await L(this.contractWrapper.getProvider(),this.getAddress(),gs.from(t))}async normalizeAmount(t){let e=await this.contractWrapper.readContract.decimals();return ys.utils.parseUnits(Y.parse(t),e)}};c(Ht,"Erc20");import{BigNumber as go}from"ethers";import{AddressZero as yo}from"@ethersproject/constants";var Ee=class{constructor(t){this.contractWrapper=t}async getAllHolderBalances(){let e=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.Transfer())).map(a=>a.args),r={};return e.forEach(a=>{let n=a.from,s=a.to,i=a.value;n!==yo&&(n in r||(r[n]=go.from(0)),r[n]=r[n].sub(i)),s!==yo&&(s in r||(r[s]=go.from(0)),r[s]=r[s].add(i))}),Promise.all(Object.keys(r).map(async a=>({holder:a,balance:await L(this.contractWrapper.getProvider(),this.contractWrapper.readContract.address,r[a])})))}};c(Ee,"TokenERC20History");import{BigNumber as wo}from"ethers";import{AddressZero as Co}from"@ethersproject/constants";var ke=100;import{BigNumber as Cs}from"ethers";import{ERC165__factory as Ss,TokenERC1155__factory as Ts,TokenERC721__factory as Ws}from"@thirdweb-dev/contracts";async function Zt(o,t,e){let r=await e.get(t);return Xe.parse(T({id:Cs.from(o),uri:t},r))}c(Zt,"fetchTokenMetadata");async function Mt(o,t,e,r){let a,n=Ss.connect(o,t),s=await n.supportsInterface(Gt),i=await n.supportsInterface(zt);if(s)a=await Ws.connect(o,t).tokenURI(e);else if(i)a=await Ts.connect(o,t).uri(e);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new ft;return Zt(e,a,r)}c(Mt,"fetchTokenMetadataForContract");async function sr(o,t){return typeof o=="string"?o:await t.uploadMetadata(it.parse(o))}c(sr,"uploadOrExtractURI");async function Lt(o,t){if(bs(o))return o;if(As(o)){let{metadataUris:e}=await t.uploadMetadataBatch(o.map(r=>it.parse(r)));return e}else throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}c(Lt,"uploadOrExtractURIs");function bs(o){return o.find(t=>typeof t!="string")===void 0}c(bs,"isUriList");function As(o){return o.find(t=>typeof t!="object")===void 0}c(As,"isMetadataList");var qt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=lt.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=lt.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.ownerOf(t).catch(()=>Co),this.getTokenMetadata(t)]);return{owner:e,metadata:r}}async getAll(t){let e=wo.from((t==null?void 0:t.start)||0).toNumber(),r=wo.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.balanceOf(e),a=Array.from(Array(r.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(e,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(j("transfer"),Co)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[r,t,e])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);if(!e)throw new ft;return Zt(t,e,this.storage)}};c(qt,"Erc721");import{BigNumber as Hr}from"ethers";import{AddressZero as vs}from"@ethersproject/constants";var So;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(So||(So={}));var Qt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=lt.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=lt.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>Hr.from(0)),this.getTokenMetadata(t)]);return zr.parse({supply:e,metadata:r})}async getAll(t){let e=Hr.from((t==null?void 0:t.start)||0).toNumber(),r=Hr.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return B(T({},i),{owner:e,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(j("transfer"),vs)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e,r,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,e,r,a])}}async burn(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[r,t,e])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.uri(t);if(!e)throw new ft;return Zt(t,e,this.storage)}};c(Qt,"Erc1155");import{BigNumber as To,ethers as xs}from"ethers";import Ps from"tiny-invariant";var Re=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();return await yt(this.contractWrapper,To.from(a.price),e.currencyAddress,n),{receipt:await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n)}}async mintBatch(t){let r=(await Promise.all(t.map(async a=>{let n=await this.mapPayloadToContractStruct(a.payload),s=a.signature,i=a.payload.price;if(To.from(i).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:n,signature:s}}))).map(a=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[a.message,a.signature]));return{receipt:await this.contractWrapper.multiCall(r)}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>Fr.parse(s)),r=await this.contractWrapper.getChainID(),a=this.contractWrapper.getSigner();Ps(a,"No signer available");let n=await this.contractWrapper.readContract.name();return await Promise.all(e.map(async s=>{let i=xa.parse(s),p=await this.contractWrapper.signTypedData(a,{name:n,version:"1",chainId:r,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:ka},await this.mapPayloadToContractStruct(i));return{payload:i,signature:p.toString()}}))}async mapPayloadToContractStruct(t){let e=await at(this.contractWrapper.getProvider(),t.price,t.currencyAddress),r=xs.utils.parseUnits(t.quantity,await this.contractWrapper.readContract.decimals());return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:r,price:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid}}};c(Re,"Erc20SignatureMinting");import{BigNumber as Wo}from"ethers";import Es from"tiny-invariant";var Fe=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await yt(this.contractWrapper,Wo.from(a.price),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let r=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),p=s.signature,m=s.payload.price;if(Wo.from(m).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:p}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(r),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(i=>tr.parse(i)),r=e.map(i=>i.metadata),a=await Lt(r,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return Es(s,"No signer available"),await Promise.all(e.map(async(i,p)=>{let m=a[p],d=Ir.parse(B(T({},i),{uri:m})),l=await this.contractWrapper.signTypedData(s,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:Ra},await this.mapPayloadToContractStruct(d));return{payload:d,signature:l.toString()}}))}async mapPayloadToContractStruct(t){let e=await at(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:e,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};c(Fe,"Erc721SignatureMinting");import ks from"tiny-invariant";import{BigNumber as Rs}from"ethers";var Ie=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await yt(this.contractWrapper,a.pricePerToken.mul(a.quantity),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let r=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),p=s.signature,m=s.payload.price;if(Rs.from(m).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:p}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(r),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(i=>Pa.parse(i)),r=e.map(i=>i.metadata),a=await Lt(r,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return ks(s,"No signer available"),await Promise.all(e.map(async(i,p)=>{let m=a[p],d=Ea.parse(B(T({},i),{uri:m})),l=await this.contractWrapper.signTypedData(s,{name:"TokenERC1155",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:Fa},await this.mapPayloadToContractStruct(d));return{payload:d,signature:l.toString()}}))}async mapPayloadToContractStruct(t){let e=await at(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};c(Ie,"Erc1155SignatureMinting");import{ERC165__factory as Fs,IERC1155__factory as Is,IERC721__factory as _s}from"@thirdweb-dev/contracts";import{BigNumber as Ft}from"ethers";import{AddressZero as Eo}from"@ethersproject/constants";import{BigNumber as Zr}from"ethers";import{ERC165__factory as bo,IERC1155__factory as Ao,IERC721__factory as vo}from"@thirdweb-dev/contracts";import Kt from"tiny-invariant";async function xo(o,t,e,r,a){try{let n=bo.connect(e,o),s=await n.supportsInterface(Gt),i=await n.supportsInterface(zt);if(s){let p=vo.connect(e,o);return await p.isApprovedForAll(a,t)?!0:(await p.getApproved(r)).toLowerCase()===t.toLowerCase()}else return i?await Ao.connect(e,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}c(xo,"isTokenApprovedForMarketplace");async function ir(o,t,e,r,a){let n=bo.connect(e,o),s=await n.supportsInterface(Gt),i=await n.supportsInterface(zt);if(s){let p=new C(o,e,vo.abi,{});await p.readContract.isApprovedForAll(a,t)||(await p.readContract.getApproved(r)).toLowerCase()===t.toLowerCase()||await p.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let p=new C(o,e,Ao.abi,{});await p.readContract.isApprovedForAll(a,t)||await p.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}c(ir,"handleTokenApproval");function cr(o){switch(Kt(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),Kt(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),Kt(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),Kt(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),Kt(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),Kt(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":Kt(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}c(cr,"validateNewListingParam");async function pr(o,t,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await L(o,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:t}}c(pr,"mapOffer");function Po(o,t,e){return e=Zr.from(e),o=Zr.from(o),t=Zr.from(t),t.sub(o).mul(Pr).div(o).gte(e)}c(Po,"isWinningBid");import Os from"tiny-invariant";import{isAddress as Ds}from"ethers/lib/utils";var _e=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===Eo)throw new Ct(this.getAddress(),t.toString());if(e.listingType!==H.Direct)throw new Ut(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(e)}async getActiveOffer(t,e){await this.validateListing(Ft.from(t)),Os(Ds(e),"Address must be a valid address");let r=await this.contractWrapper.readContract.offers(t,e);if(r.offeror!==Eo)return await pr(this.contractWrapper.getProvider(),Ft.from(t),r)}async createListing(t){cr(t),await ir(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await at(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:H.Direct,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",r==null?void 0:r.logs)[0].args.listingId,receipt:r}}async makeOffer(t,e,r,a){if(At(r))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await at(this.contractWrapper.getProvider(),a,r);try{await this.getListing(t)}catch(m){throw console.error("Failed to get listing, err =",m),new Error(`Error getting the listing with id ${t}`)}let s=Ft.from(e),i=Ft.from(n).mul(s),p=await this.contractWrapper.getCallOverrides()||{};return await yt(this.contractWrapper,i,r,p),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e,r,n],p)}}async acceptOffer(t,e){await this.validateListing(Ft.from(t));let r=await this.contractWrapper.readContract.offers(t,e);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,e,r.currency,r.pricePerToken])}}async buyoutListing(t,e,r){let a=await this.validateListing(Ft.from(t));if(!await this.isStillValidListing(a,e))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=r||await this.contractWrapper.getSignerAddress(),i=Ft.from(e),p=Ft.from(a.buyoutPrice).mul(i),m=await this.contractWrapper.getCallOverrides()||{};return await yt(this.contractWrapper,p,a.currencyContractAddress,m),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,p],m)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:Ft.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await L(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await Mt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:H.Direct}}async isStillValidListing(t,e){if(!await xo(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=Fs.connect(t.assetContractAddress,a),s=await n.supportsInterface(Gt),i=await n.supportsInterface(zt);return s?(await _s.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await Is.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(e||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};c(_e,"MarketplaceDirect");import{BigNumber as ot,ethers as Ns}from"ethers";import{AddressZero as ko}from"@ethersproject/constants";import Ro from"tiny-invariant";var Oe=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.listingId.toString()!==t.toString())throw new Ct(this.getAddress(),t.toString());if(e.listingType!==H.Auction)throw new Ut(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(e)}async getWinningBid(t){await this.validateListing(ot.from(t));let e=await this.contractWrapper.readContract.winningBid(t);if(e.offeror!==ko)return await pr(this.contractWrapper.getProvider(),ot.from(t),e)}async getWinner(t){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq(ot.from(t)));if(!r)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return r.args.winningBidder}async createListing(t){cr(t),await ir(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await at(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await at(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:H.Auction,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let e=await this.validateListing(ot.from(t)),r=await Nt(this.contractWrapper.getProvider(),e.currencyContractAddress);return this.makeBid(t,Ns.utils.formatUnits(e.buyoutPrice,r.decimals))}async makeBid(t,e){let r=await this.validateListing(ot.from(t)),a=await at(this.contractWrapper.getProvider(),e,r.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let d=Po(s.pricePerToken,a,n);Ro(d,"Bid price is too low based on the current winning bid and the bid buffer")}else{let d=a,l=ot.from(r.reservePrice);Ro(d.gte(l),"Bid price is too low based on reserve price")}let i=ot.from(r.quantity),p=a.mul(i),m=await this.contractWrapper.getCallOverrides()||{};return await yt(this.contractWrapper,p,r.currencyContractAddress,m),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r.quantity,r.currencyContractAddress,a],m)}}async cancelListing(t){let e=await this.validateListing(ot.from(t)),r=ot.from(Math.floor(Date.now()/1e3)),a=ot.from(e.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(r.gt(a)&&n.offeror!==ko)throw new fe(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[ot.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,e){e||(e=await this.contractWrapper.getSignerAddress());let r=await this.validateListing(ot.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[ot.from(t),e])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new ge(t.toString(),r.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:ot.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await L(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await Mt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await L(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:ot.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:H.Auction}}};c(Oe,"MarketplaceAuction");import{TWRegistry__factory as Bs}from"@thirdweb-dev/contracts";import{isAddress as Ms}from"ethers/lib/utils";import{AddressZero as Ls}from"@ethersproject/constants";var De=class extends C{constructor(t,e,r){super(e,t,Bs.abi,r)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(e=>Ms(e)&&e.toLowerCase()!==Ls)}};c(De,"ContractRegistry");import{TWFactory__factory as hi}from"@thirdweb-dev/contracts";import{BigNumber as Vo,ethers as fi}from"ethers";import{TokenERC721__factory as Us}from"@thirdweb-dev/contracts";var N=class{constructor(t){this.contractWrapper=t}addListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.on(r.name,(...a)=>{let n={};r.inputs.map(s=>s.name).forEach((s,i)=>{n[s]=a[i]}),e(n)})}removeListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(r.name,e)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners()}};c(N,"ContractEvents");var U=class{constructor(t){this.contractWrapper=t}async get(){let[t,e]=await this.contractWrapper.readContract.getPlatformFeeInfo();return k.parse({platform_fee_recipient:t,platform_fee_basis_points:e})}async set(t){let e=k.parse(t);return{receipt:await this.contractWrapper.sendTransaction("setPlatformFeeInfo",[e.platform_fee_recipient,e.platform_fee_basis_points])}}};c(U,"ContractPlatformFee");var Ne=class extends qt{constructor(t,e,r,a={},n=new C(t,e,Ne.contractFactory.abi,a)){super(n,r,a),this.metadata=new A(this.contractWrapper,Ne.schema,this.storage),this.roles=new O(this.contractWrapper,Ne.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new rt(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.signature=new Fe(this.contractWrapper,this.roles,this.storage),this.events=new N(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await sr(e,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,r]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let a=(await Lt(e,this.storage)).map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<e.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let p=i.args.tokenIdMinted;return{id:p,receipt:n,data:()=>this.get(p)}})}},Z=Ne;c(Z,"NFTCollection"),g(Z,"contractType","nft-collection"),g(Z,"contractRoles",["admin","minter","transfer"]),g(Z,"contractFactory",Us),g(Z,"schema",io);import{DropERC1155__factory as $s}from"@thirdweb-dev/contracts";import{hexZeroPad as qr}from"ethers/lib/utils";import{ethers as Fo}from"ethers";var R=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,e){let r=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,e);return Fo.utils.formatEther(a.mul(r))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Fo.utils.formatUnits(t,"gwei")}};c(R,"GasCostEstimator");var F=class{constructor(t){this.contractWrapper=t}overrideNextTransaction(t){this.contractWrapper.withTransactionOverride(t)}};c(F,"ContractInterceptor");var Be=class extends Qt{constructor(t,e,r,a={},n=new C(t,e,Be.contractFactory.abi,a)){super(n,r,a),this.metadata=new A(this.contractWrapper,Be.schema,this.storage),this.roles=new O(this.contractWrapper,Be.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new rt(this.contractWrapper),this.claimConditions=new xe(this.contractWrapper,this.metadata,this.storage),this.history=new Pe(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.events=new N(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}async createBatch(t){var m;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(d=>it.parse(d)),e.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,`${r.baseUri.endsWith("/")?r.baseUri:`${r.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,p=[];for(let d=s;d.lte(i);d=d.add(1))p.push({id:d,receipt:a,data:()=>this.getTokenMetadata(d)});return p}async claimTo(t,e,r,a=[qr([0],32)]){let n=await this.prepareClaim(e,r,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,e,r,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,e,r=[qr([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,e,r)}async prepareClaim(t,e,r=[qr([0],32)]){return ne(e,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},M=Be;c(M,"EditionDrop"),g(M,"contractType","edition-drop"),g(M,"contractRoles",["admin","minter","transfer"]),g(M,"contractFactory",$s),g(M,"schema",Ja);import{TokenERC1155__factory as Vs}from"@thirdweb-dev/contracts";import{BigNumber as Gs,ethers as Io}from"ethers";var Me=class extends Qt{constructor(t,e,r,a={},n=new C(t,e,Me.contractFactory.abi,a)){super(n,r,a),this.metadata=new A(this.contractWrapper,Me.schema,this.storage),this.roles=new O(this.contractWrapper,Me.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new rt(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new N(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.signature=new Ie(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await sr(e.metadata,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,Io.constants.MaxUint256,r,e.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,e){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,e)}async mintAdditionalSupplyTo(t,e,r){let a=await this.getTokenMetadata(e),n=await this.contractWrapper.sendTransaction("mintTo",[t,e,a.uri,r]);return{id:Gs.from(e),receipt:n,data:()=>this.get(e)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let r=e.map(m=>m.metadata),a=e.map(m=>m.supply),s=(await Lt(r,this.storage)).map((m,d)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,Io.constants.MaxUint256,m,a[d]])),i=await this.contractWrapper.multiCall(s),p=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(p.length===0||p.length<r.length)throw new Error("TokenMinted event not found, minting failed");return p.map(m=>{let d=m.args.tokenIdMinted;return{id:d,receipt:i,data:()=>this.get(d)}})}},q=Me;c(q,"Edition"),g(q,"contractType","edition"),g(q,"contractRoles",["admin","minter","transfer"]),g(q,"contractFactory",Vs),g(q,"schema",po);import{TokenERC20__factory as zs}from"@thirdweb-dev/contracts";var Le=class extends Ht{constructor(t,e,r,a={},n=new C(t,e,Le.contractFactory.abi,a)){super(n,r,a),this.metadata=new A(this.contractWrapper,Le.schema,this.storage),this.roles=new O(this.contractWrapper,Le.contractRoles),this.history=new Ee(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new N(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.signature=new Re(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,await this.normalizeAmount(e)])}}async mintBatchTo(t){let e=[];for(let r of t)e.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[r.toAddress,await this.normalizeAmount(r.amount)]));return{receipt:await this.contractWrapper.multiCall(e)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},$=Le;c($,"Token"),g($,"contractType","token"),g($,"contractRoles",["admin","minter","transfer"]),g($,"contractFactory",zs),g($,"schema",no);import{DropERC20__factory as Zs}from"@thirdweb-dev/contracts";var _o=v.merge(x).merge(dt).merge(D),js=I.merge(x).merge(dt).merge(D),Hs=_o.merge(k).merge(st).merge(_),Oo={deploy:Hs,output:js,input:_o};import{hexZeroPad as Qr}from"@ethersproject/bytes";var Ue=class extends Ht{constructor(t,e,r,a={},n=new C(t,e,Ue.contractFactory.abi,a)){super(n,r,a),this.metadata=new A(this.contractWrapper,Ue.schema,this.storage),this.roles=new O(this.contractWrapper,Ue.contractRoles),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.sales=new rt(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.claimConditions=new jt(this.contractWrapper,this.metadata,this.storage)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async claim(t,e=[Qr([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async claimTo(t,e,r=[Qr([0],32)]){let a=await this.normalizeAmount(e),n=await this.prepareClaim(a,r);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,a,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}async prepareClaim(t,e=[Qr([0],32)]){return ne(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},Q=Ue;c(Q,"TokenDrop"),g(Q,"contractType","token-drop"),g(Q,"contractRoles",["admin","transfer"]),g(Q,"contractFactory",Zs),g(Q,"schema",Oo);import{IERC20__factory as qs,VoteERC20__factory as Qs}from"@thirdweb-dev/contracts";import{BigNumber as Do,ethers as Kr}from"ethers";import Ks from"deep-equal";var mr=class{constructor(t,e,r,a={},n=new C(t,e,mr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new A(this.contractWrapper,mr.schema,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new N(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let r=(await this.getAll()).filter(a=>Ks(Do.from(a.proposalId),Do.from(t)));if(r.length===0)throw new Error("proposal not found");return r[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((e,r)=>({toAddress:t.targets[r],nativeTokenValue:e,transactionData:t.calldatas[r]}))})))}async getProposalVotes(t){let e=await this.contractWrapper.readContract.proposalVotes(t);return[{type:oe.Against,label:"Against",count:e.againstVotes},{type:oe.For,label:"For",count:e.forVotes},{type:oe.Abstain,label:"Abstain",count:e.abstainVotes}]}async hasVoted(t,e){return e||(e=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,e)}async canExecute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=Kr.utils.id(e.description);try{return await this.contractWrapper.callStatic().execute(r,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:Kr.utils.formatUnits(t,18)}}async balanceOfToken(t){let e=qs.connect(t,this.contractWrapper.getProvider());return await L(this.contractWrapper.getProvider(),t,await e.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,e,r,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await Nt(this.contractWrapper.getProvider(),r);return{votingDelay:t.toString(),votingPeriod:e.toString(),votingTokenAddress:r,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,e){e||(e=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let r=e.map(p=>p.toAddress),a=e.map(p=>p.nativeTokenValue),n=e.map(p=>p.transactionData),s=await this.contractWrapper.sendTransaction("propose",[r,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,e,r=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,e,r])}}async execute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=Kr.utils.id(e.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[r,a,n,s])}}},K=mr;c(K,"Vote"),g(K,"contractType","vote"),g(K,"contractFactory",Qs),g(K,"schema",uo);import{IERC20__factory as Js,Split__factory as Ys}from"@thirdweb-dev/contracts";import{BigNumber as No}from"ethers";var dr=class{constructor(t,e,r,a={},n=new C(t,e,dr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new A(this.contractWrapper,dr.schema,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new N(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],e=No.from(0),r=await this.contractWrapper.readContract.payeeCount();for(;e.lt(r);)try{let a=await this.contractWrapper.readContract.payee(e);t.push(await this.getRecipientSplitPercentage(a)),e=e.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),e={};for(let r of t)e[r.address]=await this.balanceOf(r.address);return e}async balanceOfTokenAllRecipients(t){let e=await this.getAllRecipients(),r={};for(let a of e)r[a.address]=await this.balanceOfToken(a.address,t);return r}async balanceOf(t){let e=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),r=await this.contractWrapper.readContract["totalReleased()"](),a=e.add(r);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,e){let a=await Js.connect(e,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](e),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](e,t));return await L(this.contractWrapper.getProvider(),e,i)}async getRecipientSplitPercentage(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:r.mul(No.from(1e7)).div(e).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,e){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[e,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,e,r){return e.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(r)}},J=dr;c(J,"Split"),g(J,"contractType","split"),g(J,"contractFactory",Ys),g(J,"schema",ao);import{Marketplace__factory as Xs}from"@thirdweb-dev/contracts";import{BigNumber as Jt}from"ethers";import ti from"tiny-invariant";import{AddressZero as $e}from"@ethersproject/constants";var Ve=class{constructor(t,e,r,a={},n=new C(t,e,Ve.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new A(this.contractWrapper,Ve.schema,this.storage),this.roles=new O(this.contractWrapper,Ve.contractRoles),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.direct=new _e(this.contractWrapper,this.storage),this.auction=new Oe(this.contractWrapper,this.storage),this.events=new N(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===$e)throw new Ct(this.getAddress(),t.toString());switch(e.listingType){case H.Auction:return await this.auction.mapListing(e);case H.Direct:return await this.direct.mapListing(e);default:throw new Error(`Unknown listing type: ${e.listingType}`)}}async getActiveListings(t){let e=await this.getAllListingsNoFilter(),r=this.applyFilter(e,t),a=Jt.from(Math.floor(Date.now()/1e3));return r.filter(n=>n.type===H.Auction&&Jt.from(n.endTimeInEpochSeconds).gt(a)&&Jt.from(n.startTimeInEpochSeconds).lte(a)||n.type===H.Direct&&n.quantity>0)}async getAllListings(t){let e=await this.getAllListingsNoFilter();return this.applyFilter(e,t)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(j("lister"),$e)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,e,r){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new Ct(this.getAddress(),t.toString());switch(a.listingType){case H.Direct:return ti(e!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,e,r);case H.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[e,Jt.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[Jt.from(t),e])}async allowListingFromSpecificAssetOnly(t){let e=[];(await this.roles.get("asset")).includes($e)&&e.push(this.encoder.encode("revokeRole",[j("asset"),$e])),e.push(this.encoder.encode("grantRole",[j("asset"),t])),await this.contractWrapper.multiCall(e)}async allowListingFromAnyAsset(){let t=[],e=await this.roles.get("asset");for(let r in e)t.push(this.encoder.encode("revokeRole",[j("asset"),r]));t.push(this.encoder.encode("grantRole",[j("asset"),$e])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async e=>{let r;try{r=await this.getListing(e)}catch{return}if(r.type===H.Auction)return r;if(!!await this.direct.isStillValidListing(r))return r}))).filter(e=>e!==void 0)}applyFilter(t,e){let r=[...t],a=Jt.from((e==null?void 0:e.start)||0).toNumber(),n=Jt.from((e==null?void 0:e.count)||100).toNumber();return e&&(e.seller&&(r=r.filter(s=>{var i;return s.sellerAddress.toString().toLowerCase()===((i=e==null?void 0:e.seller)==null?void 0:i.toString().toLowerCase())})),e.tokenContract&&(r=r.filter(s=>{var i;return s.assetContractAddress.toString().toLowerCase()===((i=e==null?void 0:e.tokenContract)==null?void 0:i.toString().toLowerCase())})),e.tokenId&&(r=r.filter(s=>{var i;return s.tokenId===((i=e==null?void 0:e.tokenId)==null?void 0:i.toString())})),r=r.filter((s,i)=>i>=a),r=r.slice(0,n)),r}},V=Ve;c(V,"Marketplace"),g(V,"contractType","marketplace"),g(V,"contractRoles",["admin","lister","asset"]),g(V,"contractFactory",Xs),g(V,"schema",Xa);import{IERC1155__factory as ei,IERC20__factory as Bo,Pack__factory as ri}from"@thirdweb-dev/contracts";import{BigNumber as Mo,ethers as ai}from"ethers";var Ge=class{constructor(t,e,r,a={},n=new C(t,e,Ge.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new A(this.contractWrapper,Ge.schema,this.storage),this.roles=new O(this.contractWrapper,Ge.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new N(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r,a]=await Promise.all([Mt(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>Mo.from("0"))]);return{id:Mo.from(t).toString(),metadata:e,creator:r.creator,currentSupply:a,openStart:r.openStart.gt(0)?new Date(r.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(e=>this.get(e.toString())))}async getNFTs(t){let e=await this.contractWrapper.readContract.getPackWithRewards(t);if(!e.source)throw new ft;return(await Promise.all(e.tokenIds.map(a=>Mt(e.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:e.amountsPacked[n],metadata:a}))}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),e=ve[t],r=Bo.connect(e.linkTokenAddress,this.contractWrapper.getProvider());return await L(this.contractWrapper.getProvider(),e.linkTokenAddress,await r.balanceOf(this.getAddress()))}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let p=await this.get(s.toString());return B(T({},p),{ownedByAddress:i})}))}async open(t){let e=await this.contractWrapper.sendTransaction("openPack",[t]),r=this.contractWrapper.parseLogs("PackOpenRequested",e==null?void 0:e.logs);if(r.length===0)throw new Error("Failed to open pack");let a=r[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(d=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(l,f,y,W,wt)=>{n===y&&d({packId:l,opener:f,requestId:n,rewardContract:W,rewardIds:wt})})}),{rewardIds:p,rewardContract:m}=i;return p.map(d=>({id:t,receipt:e,data:()=>Mt(m,this.contractWrapper.getProvider(),d.toString(),this.storage)}))}async create(t){let e=ei.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),r=await this.contractWrapper.getSignerAddress(),a=t.assets.map(f=>f.tokenId),n=t.assets.map(f=>f.amount),s=await this.storage.uploadMetadata(t.metadata),i=ai.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),m=await(await e.safeBatchTransferFrom(r,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),d=this.contractWrapper.parseLogs("PackAdded",m.logs);if(d.length===0)throw new Error("PackCreated event not found");let l=d[0].args.packId;return{id:l,receipt:m,data:()=>this.get(l.toString())}}async transfer(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,e,r,[0]])}}async transferFrom(t,e,r,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,e,r.tokenId,r.amount,a])}}async transferBatchFrom(t,e,r,a=[0]){let n=r.map(i=>i.tokenId),s=r.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,e,n,s,a])}}async setApproval(t,e=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async depositLink(t){let e=await this.contractWrapper.getChainID(),r=ve[e];return{receipt:await(await Bo.connect(r.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},G=Ge;c(G,"Pack"),g(G,"contractType","pack"),g(G,"contractRoles",["admin","minter","pauser","transfer"]),g(G,"contractFactory",ri),g(G,"schema",eo);import{DropERC721__factory as ni}from"@thirdweb-dev/contracts";import{hexZeroPad as Yr}from"@ethersproject/bytes";import{BigNumber as je,ethers as si}from"ethers";import{BigNumber as oi,ethers as Jr}from"ethers";var ze=class{constructor(t,e){this.contractWrapper=t,this.storage=e}async createDelayedRevealBatch(t,e,r){var wt,ht;if(!r)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([it.parse(t)],0,this.contractWrapper.readContract.address,await((wt=this.contractWrapper.getSigner())==null?void 0:wt.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(e.map(mt=>it.parse(mt)),n.toNumber(),this.contractWrapper.readContract.address,await((ht=this.contractWrapper.getSigner())==null?void 0:ht.getAddress())),i=s.baseUri,p=await this.contractWrapper.readContract.getBaseURICount(),m=await this.contractWrapper.readContract.encryptDecrypt(Jr.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(p,r)),d=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,m]),l=this.contractWrapper.parseLogs("TokensLazyMinted",d==null?void 0:d.logs),f=l[0].args.startTokenId,y=l[0].args.endTokenId,W=[];for(let mt=f;mt.lte(y);mt=mt.add(1))W.push({id:mt,receipt:d});return W}async reveal(t,e){if(!e)throw new Error("Password is required");let r=await this.hashDelayRevealPasword(t,e);try{let a=await this.contractWrapper.callStatic().reveal(t,r);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,r])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let e=Array.from(Array(t.toNumber()).keys()),r=await Promise.all(e.map(p=>this.contractWrapper.readContract.baseURIIndices(p))),a=r.slice(0,r.length-1),n=await Promise.all(Array.from([0,...a]).map(p=>this.contractWrapper.readContract.tokenURI(p))),s=await Promise.all(Array.from([0,...a]).map(p=>this.getNftMetadata(p.toString()))),i=await Promise.all(Array.from([...r]).map(p=>this.contractWrapper.readContract.encryptedBaseURI(p)));return n.map((p,m)=>({batchId:oi.from(m),batchUri:p,placeholderMetadata:s[m]})).filter((p,m)=>Jr.utils.hexDataLength(i[m])>0)}async hashDelayRevealPasword(t,e){let r=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return Jr.utils.solidityKeccak256(["string","uint256","uint256","address"],[e,r,t,a])}async getNftMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);return Zt(t,e,this.storage)}};c(ze,"DelayedReveal");var He=class extends qt{constructor(t,e,r,a={},n=new C(t,e,He.contractFactory.abi,a)){super(n,r,a),this.metadata=new A(this.contractWrapper,He.schema,this.storage),this.roles=new O(this.contractWrapper,He.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new rt(this.contractWrapper),this.claimConditions=new jt(this.contractWrapper,this.metadata,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new N(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.revealer=new ze(this.contractWrapper,this.storage),this.interceptor=new F(this.contractWrapper)}async getAllClaimed(t){let e=je.from((t==null?void 0:t.start)||0).toNumber(),r=je.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),e+r);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let e=je.from((t==null?void 0:t.start)||0).toNumber(),r=je.from((t==null?void 0:t.count)||100).toNumber(),a=je.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),e+r)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var d;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(l=>it.parse(l)),e.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=r.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,a.endsWith("/")?a:`${a}/`,si.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,p=s[0].args.endTokenId,m=[];for(let l=i;l.lte(p);l=l.add(1))m.push({id:l,receipt:n,data:()=>this.getTokenMetadata(l)});return m}async claimTo(t,e,r=[Yr([0],32)]){let a=await this.prepareClaim(e,r),n=await this.contractWrapper.sendTransaction("claim",[t,e,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,p=i.add(e),m=[];for(let d=i;d.lt(p);d=d.add(1))m.push({id:d,receipt:n,data:()=>this.get(d)});return m}async claim(t,e=[Yr([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async prepareClaim(t,e=[Yr([0],32)]){return ne(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},z=He;c(z,"NFTDrop"),g(z,"contractType","nft-drop"),g(z,"contractRoles",["admin","minter","transfer"]),g(z,"contractFactory",ni),g(z,"schema",Qa);var lr={[z.contractType]:z,[Z.contractType]:Z,[M.contractType]:M,[q.contractType]:q,[Q.contractType]:Q,[$.contractType]:$,[K.contractType]:K,[J.contractType]:J,[V.contractType]:V,[G.contractType]:G},Lo={[z.contractType]:"DropERC721",[Z.contractType]:"TokenERC721",[M.contractType]:"DropERC1155",[q.contractType]:"TokenERC1155",[Q.contractType]:"DropERC20",[$.contractType]:"TokenERC20",[K.contractType]:"VoteERC20",[J.contractType]:"Split",[V.contractType]:"Marketplace",[G.contractType]:"Pack"},Xr={DropERC721:z.contractType,TokenERC721:Z.contractType,DropERC1155:M.contractType,TokenERC1155:q.contractType,DropERC20:Q.contractType,TokenERC20:$.contractType,VoteERC20:K.contractType,Split:J.contractType,Marketplace:V.contractType,Pack:G.contractType};import{AccessControlEnumerable__factory as pi,IThirdwebContract__factory as mi,IThirdwebPlatformFee__factory as di,IThirdwebPrimarySale__factory as li,IThirdwebRoyalty__factory as ui}from"@thirdweb-dev/contracts";var Uo=v.merge(x.merge(dt).merge(D).partial()),ii=I.merge(x.merge(dt).merge(D).partial()),ci=Uo.merge(k.merge(st).merge(_).partial()),$o={deploy:ci,output:ii,input:Uo};var ur=class{constructor(t,e,r,a,n={},s=new C(t,e,r,n)){this.storage=a,this.contractWrapper=s,this.metadata=this.detectMetadata(),this.royalties=this.detectRoyalties(),this.roles=this.detectRoles(),this.sales=this.detectPrimarySales(),this.platformFees=this.detectPlatformFees()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}detectMetadata(){if(vt(this.contractWrapper,mi.createInterface()))return new A(this.contractWrapper,ur.schema,this.storage)}detectRoyalties(){if(vt(this.contractWrapper,ui.createInterface())){let t=new A(this.contractWrapper,ur.schema,this.storage);return new et(this.contractWrapper,t)}}detectRoles(){if(vt(this.contractWrapper,pi.createInterface()))return new O(this.contractWrapper,ia)}detectPrimarySales(){if(vt(this.contractWrapper,li.createInterface()))return new rt(this.contractWrapper)}detectPlatformFees(){if(vt(this.contractWrapper,di.createInterface()))return new U(this.contractWrapper)}},Yt=ur;c(Yt,"CustomContract"),g(Yt,"contractType","custom"),g(Yt,"schema",$o);import{AddressZero as Go}from"@ethersproject/constants";var Ze=class extends C{constructor(t,e,r,a){super(e,t,hi.abi,a),this.storage=r}async deploy(t,e){var f;let r=lr[t],a=r.schema.deploy.parse(e),n=r.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((f=this.getSigner())==null?void 0:f.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),p=Lo[t];console.log(`Remote contractName : ${p}`);let m=fi.utils.formatBytes32String(p);console.log(`Deploying ${t} proxy`);let d=await this.sendTransaction("deployProxy",[m,i]);console.log(`${t} proxy deployed successfully`);let l=this.parseLogs("ProxyDeployed",d.logs);if(l.length<1)throw new Error("No ProxyDeployed event found");return l[0].args.proxy}async getDeployArguments(t,e,r){let a=await this.getDefaultTrustedForwarders();switch(e.trusted_forwarders&&e.trusted_forwarders.length>0&&(a=e.trusted_forwarders),t){case z.contractType:case Z.contractType:let n=z.schema.deploy.parse(e);return[await this.getSignerAddress(),n.name,n.symbol,r,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case M.contractType:case q.contractType:let s=M.schema.deploy.parse(e);return[await this.getSignerAddress(),s.name,s.symbol,r,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case Q.contractType:case $.contractType:let i=$.schema.deploy.parse(e);return[await this.getSignerAddress(),i.name,i.symbol,r,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case K.contractType:let p=K.schema.deploy.parse(e);return[p.name,r,a,p.voting_token_address,p.voting_delay_in_blocks,p.voting_period_in_blocks,Vo.from(p.proposal_token_threshold),p.voting_quorum_fraction];case J.contractType:let m=J.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,m.recipients.map(y=>y.address),m.recipients.map(y=>Vo.from(y.sharesBps))];case V.contractType:let d=V.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,d.platform_fee_recipient,d.platform_fee_basis_points];case G.contractType:let l=G.schema.deploy.parse(e),f=ve[await this.getChainID()];return[await this.getSignerAddress(),l.name,l.symbol,r,a,l.fee_recipient,l.seller_fee_basis_points,f.fees,f.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),e=fa.find(a=>a===t),r=e?_r[e].biconomyForwarder:Go;return r!==Go?[Se,r]:[Se]}};c(Ze,"ContractFactory");var qe=class extends Rt{constructor(t,e,r){super(t,e),this.storage=r}async deployNFTCollection(t){return await this.deployContract(Z.contractType,t)}async deployNFTDrop(t){return await this.deployContract(z.contractType,t)}async deployEdition(t){return await this.deployContract(q.contractType,t)}async deployEditionDrop(t){let e=M.schema.deploy.parse(t);return await this.deployContract(M.contractType,e)}async deployToken(t){return await this.deployContract($.contractType,t)}async deployTokenDrop(t){return await this.deployContract(Q.contractType,t)}async deployMarketplace(t){return await this.deployContract(V.contractType,t)}async deployPack(t){return await this.deployContract(G.contractType,t)}async deploySplit(t){return await this.deployContract(J.contractType,t)}async deployVote(t){return await this.deployContract(K.contractType,t)}async deployContract(t,e){return await(await this.getFactory()).deploy(t,e)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,e=Te(t,"twRegistry");return this._registry=Promise.resolve(new De(e,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,e=Te(t,"twFactory");return this._factory=Promise.resolve(new Ze(e,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,e;(t=this._factory)==null||t.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())}),(e=this._registry)==null||e.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())})}};c(qe,"ContractDeployer");import{ethers as gi}from"ethers";function ta(o,t){let e=Object.keys(o);for(let r in e){let a=o[e[r]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){ta(a,t);continue}!n||(o[e[r]]=`ipfs://${t.splice(0,1)[0]}`)}return o}c(ta,"replaceFilePropertiesWithHashes");function hr(o,t,e){let r=Object.keys(o);for(let a in r){let n=o[r[a]];o[r[a]]=fr(n,t,e),Array.isArray(n)&&(o[r[a]]=n.map(s=>typeof s=="object"?hr(s,t,e):fr(s,t,e))),typeof n=="object"&&hr(n,t,e)}return o}c(hr,"replaceHashWithGatewayUrl");function fr(o,t,e){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,e):o}c(fr,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=oa("form-data"));var Qe=class{constructor(t=La){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,e,r){return`${await this.uploadBatch([t],0,e,r)}0`}async uploadBatch(t,e=0,r,a){let{cid:n}=await this.uploadBatchWithCid(t,e,r,a);return`ipfs://${n}/`}async getUploadToken(t){let e={"X-App-Name":`CONSOLE-TS-SDK-${t}`},r=await fetch(`${Ua}/grant`,{method:"GET",headers:e});if(!r.ok)throw new ue("Failed to get upload token");return await r.text()}async get(t){let r=await(await this._get(t)).json();return hr(r,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,e,r){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,e,r);return a[0]}async uploadMetadataBatch(t,e,r,a){let n=(await this.batchUploadProperties(t)).map(d=>JSON.stringify(d)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,e,r,a),p=`ipfs://${s}/`,m=i.map(d=>`${p}${d}`);return{baseUri:p,metadataUris:m}}async _get(t){let e=t;t&&(e=fr(t,"ipfs://",this.gatewayUrl));let r=await fetch(e);if(!r.ok)throw new Error(`Status code (!= 200) =${r.status}`);return r}async batchUploadProperties(t){let e=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(e.length===0)return t;let{cid:r,fileNames:a}=await this.uploadBatchWithCid(e),n=[];for(let i of a)n.push(`${r}/${i}`);return await ta(t,n)}buildFilePropertiesMap(t,e=[]){if(Array.isArray(t))t.forEach(r=>{this.buildFilePropertiesMap(r,e)});else if(t){let r=Object.values(t);for(let a of r)a instanceof File||a instanceof Buffer?e.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,e)}return e}async uploadBatchWithCid(t,e=0,r,a){let n=await this.getUploadToken(r||""),s={name:`CONSOLE-TS-SDK-${r}`,keyvalues:{sdk:"typescript",contractAddress:r,signerAddress:a}},i=new FormData,p=[];t.forEach((l,f)=>{let y="",W=l;if(l instanceof File){let ht="";if(l.name){let mt=l.name.lastIndexOf(".");mt>-1&&(ht=l.name.substring(mt))}y=`${f+e}${ht}`}else l instanceof Buffer||typeof l=="string"?y=`${f+e}`:l&&l.name&&(l==null?void 0:l.data)?(W=l==null?void 0:l.data,y=`${l.name}`):y=`${f+e}`;let wt=`files/${y}`;if(p.indexOf(y)>-1)throw new le(y);p.push(y),typeof window>"u"?i.append("file",W,{filepath:wt}):i.append("file",new Blob([W]),wt)}),i.append("pinataMetadata",JSON.stringify(s));let m=await fetch($a,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),d=await m.json();if(!m.ok)throw console.log(d),new de("Failed to upload files to IPFS");return{cid:d.IpfsHash,fileNames:p}}};c(Qe,"IpfsStorage");import{IThirdwebContract__factory as yi}from"@thirdweb-dev/contracts";import wi from"tiny-invariant";var ea=class extends Rt{contractCache=new Map;constructor(t,e={},r=new Qe){super(t,e),this.storage=r,this.deployer=new qe(t,e,r)}getNFTDrop(t){return this.getContract(t,z.contractType)}getNFTCollection(t){return this.getContract(t,Z.contractType)}getEditionDrop(t){return this.getContract(t,M.contractType)}getEdition(t){return this.getContract(t,q.contractType)}getTokenDrop(t){return this.getContract(t,Q.contractType)}getToken(t){return this.getContract(t,$.contractType)}getVote(t){return this.getContract(t,K.contractType)}getSplit(t){return this.getContract(t,J.contractType)}getMarketplace(t){return this.getContract(t,V.contractType)}getPack(t){return this.getContract(t,G.contractType)}getContract(t,e){if(this.contractCache.has(t))return this.contractCache.get(t);let r=new lr[e](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,r),r}async resolveContractType(t){let e=yi.connect(t,this.getSignerOrProvider()),r=gi.utils.toUtf8String(await e.contractType()).replace(/\x00/g,"");return wi(r in Xr,`${r} is not a valid contract type, falling back to custom contract`),Xr[r]}async getContractList(t){let e=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(e.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}async unstable_getCustomContract(t,e){return new Yt(this.getSignerOrProvider(),t,e,this.storage,this.options)}};c(ea,"ThirdwebSDK");export{ia as ALL_ROLES,vr as AdminRoleMissingError,wr as AssetNotFoundError,fe as AuctionAlreadyStartedError,ge as AuctionHasNotEndedError,va as BaseSignaturePayloadInput,lr as CONTRACTS_MAP,_r as CONTRACT_ADDRESSES,w as ChainId,ve as ChainlinkVrf,wa as ClaimConditionInputArray,Ce as ClaimConditionInputSchema,kr as ClaimConditionOutputSchema,P as ClaimEligibility,I as CommonContractOutputSchema,v as CommonContractSchema,k as CommonPlatformFeeSchema,st as CommonPrimarySaleSchema,x as CommonRoyaltySchema,D as CommonSymbolSchema,_ as CommonTrustedForwarderSchema,qe as ContractDeployer,E as ContractEncoder,N as ContractEvents,F as ContractInterceptor,A as ContractMetadata,U as ContractPlatformFee,rt as ContractPrimarySale,O as ContractRoles,et as ContractRoyalty,en as CurrencySchema,ya as CurrencyValueSchema,Yt as CustomContract,La as DEFAULT_IPFS_GATEWAY,ke as DEFAULT_QUERY_ALL_COUNT,ze as DelayedReveal,jt as DropClaimConditions,xe as DropErc1155ClaimConditions,Pe as DropErc1155History,le as DuplicateFileNameError,he as DuplicateLeafsError,q as Edition,M as EditionDrop,bm as EditionMetadataInputOrUriSchema,Wm as EditionMetadataInputSchema,zr as EditionMetadataOutputSchema,Tm as EditionMetadataWithOwnerOutputSchema,Qt as Erc1155,Ie as Erc1155SignatureMinting,Ht as Erc20,Re as Erc20SignatureMinting,qt as Erc721,Fe as Erc721SignatureMinting,Wt as EventType,ue as FetchError,Cr as FileNameMissingError,br as FunctionDeprecatedError,R as GasCostEstimator,zt as InterfaceId_IERC1155,Gt as InterfaceId_IERC721,yr as InvalidAddressError,Qe as IpfsStorage,Ct as ListingNotFoundError,H as ListingType,V as Marketplace,Oe as MarketplaceAuction,_e as MarketplaceDirect,dt as MerkleSchema,Fa as MintRequest1155,ka as MintRequest20,Ra as MintRequest721,Tr as MissingOwnerRoleError,me as MissingRoleError,tn as NATIVE_TOKENS,Dt as NATIVE_TOKEN_ADDRESS,Z as NFTCollection,z as NFTDrop,Sr as NotEnoughTokensError,ft as NotFoundError,Se as OZ_DEFENDER_FORWARDER_ADDRESS,Sa as OptionalPropertiesInput,Ta as OptionalPropertiesOutput,$a as PINATA_IPFS_URL,G as Pack,Yi as PartialClaimConditionInputSchema,Ha as ProposalState,Wr as QuantityAboveLimitError,Lo as REMOTE_CONTRACT_NAME,Xr as REMOTE_CONTRACT_TO_CONTRACT_TYPE,Ar as RestrictedTransferError,fa as SUPPORTED_CHAIN_IDS,Pa as Signature1155PayloadInput,Ea as Signature1155PayloadOutput,Fr as Signature20PayloadInput,xa as Signature20PayloadOutput,tr as Signature721PayloadInput,Ir as Signature721PayloadOutput,Er as SnapshotAddressInput,Gi as SnapshotInfoSchema,ee as SnapshotInputSchema,we as SnapshotSchema,J as Split,Ua as TW_IPFS_SERVER_URL,ea as ThirdwebSDK,$ as Token,Q as TokenDrop,Ee as TokenERC20History,Pm as TokenMintInputSchema,Ke as TransactionError,So as UnderlyingType,de as UploadError,K as Vote,oe as VoteType,Ut as WrongListingTypeError,ca as convertToTWError,Ga as createSnapshot,Te as getContractAddressByChainId,ga as getNativeTokenByChainId,j as getRoleHash,kn as hashLeafNode,Xt as includesErrorMessage};
//# sourceMappingURL=index.mjs.map