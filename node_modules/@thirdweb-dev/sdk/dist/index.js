var Gn=Object.create;var de=Object.defineProperty,zn=Object.defineProperties,jn=Object.getOwnPropertyDescriptor,Hn=Object.getOwnPropertyDescriptors,Zn=Object.getOwnPropertyNames,to=Object.getOwnPropertySymbols,qn=Object.getPrototypeOf,eo=Object.prototype.hasOwnProperty,Qn=Object.prototype.propertyIsEnumerable;var da=(o,t,e)=>t in o?de(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,S=(o,t)=>{for(var e in t||(t={}))eo.call(t,e)&&da(o,e,t[e]);if(to)for(var e of to(t))Qn.call(t,e)&&da(o,e,t[e]);return o},L=(o,t)=>zn(o,Hn(t)),c=(o,t)=>de(o,"name",{value:t,configurable:!0});var Kn=(o,t)=>{for(var e in t)de(o,e,{get:t[e],enumerable:!0})},ro=(o,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of Zn(t))!eo.call(o,a)&&a!==e&&de(o,a,{get:()=>t[a],enumerable:!(r=jn(t,a))||r.enumerable});return o};var nt=(o,t,e)=>(e=o!=null?Gn(qn(o)):{},ro(t||!o||!o.__esModule?de(e,"default",{value:o,enumerable:!0}):e,o)),Jn=o=>ro(de({},"__esModule",{value:!0}),o);var f=(o,t,e)=>(da(o,typeof t!="symbol"?t+"":t,e),e);var Zs={};Kn(Zs,{ALL_ROLES:()=>ua,AdminRoleMissingError:()=>Pr,AssetNotFoundError:()=>Sr,AuctionAlreadyStartedError:()=>ye,AuctionHasNotEndedError:()=>we,BaseSignaturePayloadInput:()=>Wa,CONTRACTS_MAP:()=>gr,CONTRACT_ADDRESSES:()=>Br,ChainId:()=>y,ChainlinkVrf:()=>Pe,ClaimConditionInputArray:()=>Ca,ClaimConditionInputSchema:()=>Te,ClaimConditionOutputSchema:()=>Fr,ClaimEligibility:()=>P,CommonContractOutputSchema:()=>I,CommonContractSchema:()=>A,CommonPlatformFeeSchema:()=>k,CommonPrimarySaleSchema:()=>st,CommonRoyaltySchema:()=>v,CommonSymbolSchema:()=>D,CommonTrustedForwarderSchema:()=>_,ContractDeployer:()=>je,ContractEncoder:()=>E,ContractEvents:()=>B,ContractInterceptor:()=>F,ContractMetadata:()=>b,ContractPlatformFee:()=>U,ContractPrimarySale:()=>ot,ContractRoles:()=>O,ContractRoyalty:()=>at,CurrencySchema:()=>uo,CurrencyValueSchema:()=>wa,CustomContract:()=>te,DEFAULT_IPFS_GATEWAY:()=>Ia,DEFAULT_QUERY_ALL_COUNT:()=>Oe,DelayedReveal:()=>ze,DropClaimConditions:()=>jt,DropErc1155ClaimConditions:()=>Fe,DropErc1155History:()=>Ie,DuplicateFileNameError:()=>he,DuplicateLeafsError:()=>ge,Edition:()=>Q,EditionDrop:()=>M,EditionMetadataInputOrUriSchema:()=>Ls,EditionMetadataInputSchema:()=>Ms,EditionMetadataOutputSchema:()=>zr,EditionMetadataWithOwnerOutputSchema:()=>Bs,Erc1155:()=>Kt,Erc1155SignatureMinting:()=>Me,Erc20:()=>Ht,Erc20SignatureMinting:()=>Ne,Erc721:()=>Qt,Erc721SignatureMinting:()=>Be,EventType:()=>Ct,FetchError:()=>fe,FileNameMissingError:()=>Tr,FunctionDeprecatedError:()=>vr,GasCostEstimator:()=>R,InterfaceId_IERC1155:()=>Gt,InterfaceId_IERC721:()=>Vt,InvalidAddressError:()=>Cr,IpfsStorage:()=>He,ListingNotFoundError:()=>yt,ListingType:()=>Z,Marketplace:()=>V,MarketplaceAuction:()=>$e,MarketplaceDirect:()=>Le,MerkleSchema:()=>dt,MintRequest1155:()=>Ea,MintRequest20:()=>xa,MintRequest721:()=>Pa,MissingOwnerRoleError:()=>br,MissingRoleError:()=>le,NATIVE_TOKENS:()=>lo,NATIVE_TOKEN_ADDRESS:()=>Ft,NFTCollection:()=>q,NFTDrop:()=>z,NotEnoughTokensError:()=>Wr,NotFoundError:()=>ht,OZ_DEFENDER_FORWARDER_ADDRESS:()=>We,OptionalPropertiesInput:()=>Sa,OptionalPropertiesOutput:()=>Ta,PINATA_IPFS_URL:()=>Oa,Pack:()=>G,PartialClaimConditionInputSchema:()=>es,ProposalState:()=>Na,QuantityAboveLimitError:()=>Ar,REMOTE_CONTRACT_NAME:()=>Ja,REMOTE_CONTRACT_TO_CONTRACT_TYPE:()=>sa,RestrictedTransferError:()=>xr,SUPPORTED_CHAIN_IDS:()=>ga,Signature1155PayloadInput:()=>Aa,Signature1155PayloadOutput:()=>va,Signature20PayloadInput:()=>Dr,Signature20PayloadOutput:()=>ba,Signature721PayloadInput:()=>Je,Signature721PayloadOutput:()=>Nr,SnapshotAddressInput:()=>Rr,SnapshotInfoSchema:()=>ts,SnapshotInputSchema:()=>ae,SnapshotSchema:()=>Se,Split:()=>Y,TW_IPFS_SERVER_URL:()=>_a,ThirdwebSDK:()=>ma,Token:()=>$,TokenDrop:()=>K,TokenERC20History:()=>_e,TokenMintInputSchema:()=>Us,TransactionError:()=>Qe,UnderlyingType:()=>za,UploadError:()=>ue,Vote:()=>J,VoteType:()=>ne,WrongListingTypeError:()=>Nt,convertToTWError:()=>ha,createSnapshot:()=>Da,getContractAddressByChainId:()=>be,getNativeTokenByChainId:()=>ya,getRoleHash:()=>j,hashLeafNode:()=>ko,includesErrorMessage:()=>ee});module.exports=Jn(Zs);var Ju=require("cross-fetch/polyfill");var E=class{constructor(t){this.contractWrapper=t}encode(t,e){return this.contractWrapper.readContract.interface.encodeFunctionData(t,e)}decode(t,e){return this.contractWrapper.readContract.interface.decodeFunctionData(t,e)}};c(E,"ContractEncoder");var b=class{constructor(t,e,r){this.contractWrapper=t,this.schema=e,this.storage=r}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),e=await this.storage.get(t);return this.parseOutputMetadata(e)}async set(t){let e=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[e]),data:this.get}}async update(t){return await this.set(S(S({},await this.get()),t))}async _parseAndUploadMetadata(t){let e=this.parseInputMetadata(t);return this.storage.uploadMetadata(e)}};c(b,"ContractMetadata");var la=require("ethers"),ao={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"},ua=Object.keys(ao);function j(o){return o==="admin"?la.ethers.utils.hexZeroPad([0],32):la.ethers.utils.id(ao[o])}c(j,"getRoleHash");var re=nt(require("tiny-invariant"));var ht=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};c(ht,"NotFoundError");var Cr=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};c(Cr,"InvalidAddressError");var le=class extends Error{constructor(t,e){super(`MISSING ROLE: ${t} does not have the '${e}' role`)}};c(le,"MissingRoleError");var Sr=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};c(Sr,"AssetNotFoundError");var ue=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};c(ue,"UploadError");var Tr=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};c(Tr,"FileNameMissingError");var he=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};c(he,"DuplicateFileNameError");var Wr=class extends Error{constructor(t,e,r){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${e} tokens. You have ${r} tokens available.`)}};c(Wr,"NotEnoughTokensError");var br=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};c(br,"MissingOwnerRoleError");var Ar=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};c(Ar,"QuantityAboveLimitError");var fe=class extends Error{constructor(t,e){super(`FETCH_FAILED: ${t}`),this.innerError=e}};c(fe,"FetchError");var ge=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};c(ge,"DuplicateLeafsError");var ye=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};c(ye,"AuctionAlreadyStartedError");var vr=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};c(vr,"FunctionDeprecatedError");var yt=class extends Error{constructor(t,e){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}`)}};c(yt,"ListingNotFoundError");var Nt=class extends Error{constructor(t,e,r,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}${a?` expected type: ${a}`:""}${r?` actual type: ${r}`:""}`)}};c(Nt,"WrongListingTypeError");var xr=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};c(xr,"RestrictedTransferError");var Pr=class extends Error{constructor(t,e,r="Failed to execute transaction"){super(`${r}, admin role is missing${t?` on address: ${t}`:""}${e?` on contract: ${e}`:""}`)}};c(Pr,"AdminRoleMissingError");var we=class extends Error{constructor(t,e){super(`Auction has not ended yet${t?`, id: ${t}`:""}${e?`, end time: ${e.toString()}`:""}`)}};c(we,"AuctionHasNotEndedError");var Qe=class extends Error{constructor(t,e,r,a,n,s,i){let p=`Contract transaction failed

`;p+=`Message: ${t}`,p+=`

| Transaction info |
`,p+=Ze("from",e),p+=Ze("to",r),p+=Ze("data",a),p+=Ze("chain",`${n.name} (${n.chainId})`);try{let m=new URL(s);p+=Ze("RPC",m.hostname)}catch{}p+=`

`,p+="Need help with this error? Join our community: https://discord.gg/thirdweb",p+=`



`,p+="| Raw error |",p+=`

`,p+=i,super(p),this.reason=t,this.from=e,this.to=r,this.data=a,this.chain=n,this.rpcUrl=s}};c(Qe,"TransactionError");async function ha(o,t,e,r){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=qe(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=qe(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=qe(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),p=qe(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),m=qe(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return m===""&&(m=r),p===""&&(p=e),new Qe(n,p,m,s,t,i,a)}c(ha,"convertToTWError");function Ze(o,t){if(t==="")return t;let e=Array(10-o.length).fill(" ").join("");return`
${o}:${e}${t}`}c(Ze,"withSpaces");function qe(o,t){let e=t.match(o)||[],r="";return(e==null?void 0:e.length)>0&&(r+=e[1]),r}c(qe,"parseMessageParts");function ee(o,t){return o&&o.toString().includes(t)||o.message&&o.message.toString().includes(t)||o.error&&o.error.toString().includes(t)}c(ee,"includesErrorMessage");var O=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async getAll(){(0,re.default)(this.roles.length,"this contract has no support for roles");let t={};for(let e of this.roles)t[e]=await this.get(e);return t}async get(t){(0,re.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=j(t),r=(await this.contractWrapper.readContract.getRoleMemberCount(e)).toNumber();return await Promise.all(Array.from(Array(r).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(e,a)))}async setAll(t){let e=Object.keys(t);(0,re.default)(e.length,"you must provide at least one role to set"),(0,re.default)(e.every(s=>this.roles.includes(s)),"this contract does not support the given role");let r=await this.getAll(),a=[],n=e.sort(s=>s==="admin"?1:-1);for(let s=0;s<n.length;s++){let i=n[s],p=t[i]||[],m=r[i]||[],d=p.filter(h=>!m.includes(h)),l=m.filter(h=>!p.includes(h));if(d.length&&d.forEach(h=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[j(i),h]))}),l.length)for(let h=0;h<l.length;h++){let g=l[h],T=await this.getRevokeRoleFunctionName(g);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(T,[j(i),g]))}}return{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,e){await Promise.all(t.map(async r=>{if(!(await this.get(r)).map(n=>n.toLowerCase()).includes(e.toLowerCase()))throw new le(e,r)}))}async grant(t,e){return(0,re.default)(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[j(t),e])}}async revoke(t,e){(0,re.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await this.getRevokeRoleFunctionName(e);return{receipt:await this.contractWrapper.sendTransaction(r,[j(t),e])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};c(O,"ContractRoles");var Er=require("ethers"),oo=require("ethers/lib/utils"),C=require("zod");var Bt=c(()=>typeof window<"u","isBrowser");globalThis.File||(globalThis.File=require("@web-std/file").File);var fa=1e4,Yn=Bt()?[C.z.instanceof(File),C.z.string()]:[C.z.instanceof(Buffer),C.z.string()],Mt=C.z.union(Yn),no=C.z.union([C.z.array(C.z.number()),C.z.string()]),W=C.z.union([C.z.string(),C.z.number(),C.z.bigint(),C.z.instanceof(Er.BigNumber)]).transform(o=>Er.BigNumber.from(o)),Wt=W.transform(o=>o.toString()),Lt=C.z.number().max(fa,"Cannot exeed 100%").min(0,"Cannot be below 0%"),so=C.z.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Xn=C.z.union([C.z.string(),C.z.number(),C.z.boolean(),C.z.null()]),Rt=C.z.lazy(()=>C.z.union([Xn,C.z.array(Rt),C.z.record(Rt)])),io=C.z.record(Rt),co=C.z.union([C.z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),C.z.string().length(0)]),ct=C.z.string().refine(o=>(0,oo.isAddress)(o),o=>({message:`${o} is not a valid address`})),et=C.z.union([C.z.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),C.z.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),po=C.z.date().transform(o=>Er.BigNumber.from(Math.floor(o.getTime()/1e3))),kr=po.default(new Date),mo=po.default(new Date(Date.now()+1e3*60*60*24*365*10));var ka=require("@ethersproject/constants"),pt=require("zod");var bt=require("zod"),ho=require("ethers");var fo=require("ethers/lib/utils");var y;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(y||(y={}));var ga=[y.Mainnet,y.Rinkeby,y.Goerli,y.Polygon,y.Mumbai,y.Fantom,y.FantomTestnet,y.Avalanche,y.AvalancheFujiTestnet];var Ft="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",lo={[y.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[y.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[y.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[y.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[y.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[y.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[y.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[y.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[y.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[y.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function ya(o){return lo[o]}c(ya,"getNativeTokenByChainId");var Ce=require("zod");var uo=Ce.z.object({name:Ce.z.string(),symbol:Ce.z.string(),decimals:Ce.z.number()}),wa=uo.extend({value:W,displayValue:Ce.z.string()});var rt=require("zod");var dt=rt.z.object({merkle:rt.z.record(rt.z.string()).default({})}),Rr=rt.z.object({address:ct,maxClaimable:et.default(0)}),ae=rt.z.union([rt.z.array(rt.z.string()).transform(o=>o.map(t=>Rr.parse({address:t}))),rt.z.array(Rr)]),Se=rt.z.object({merkleRoot:rt.z.string(),claims:rt.z.array(Rr.extend({proof:rt.z.array(rt.z.string())}))}),ts=rt.z.object({merkleRoot:rt.z.string(),snapshotUri:rt.z.string(),snapshot:Se});var Te=bt.z.object({startTime:kr,currencyAddress:bt.z.string().default(Ft),price:et.default(0),maxQuantity:bt.z.union([et,bt.z.literal("unlimited")]).default("unlimited"),quantityLimitPerTransaction:bt.z.union([et,bt.z.literal("unlimited")]).default("unlimited"),waitInSeconds:Wt.default(0),merkleRootHash:no.default((0,fo.hexZeroPad)([0],32)),snapshot:bt.z.optional(ae)}),Ca=bt.z.array(Te),es=Te.partial(),Fr=Te.extend({availableSupply:bt.z.string().default(""),currencyMetadata:wa.default({value:ho.BigNumber.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:W,maxQuantity:W,quantityLimitPerTransaction:W,waitInSeconds:W,startTime:W.transform(o=>new Date(o.toNumber()*1e3))});var $t=require("zod");var wt=require("zod");var Ut=require("zod");var go=Rt.or(Mt),rs=Ut.z.union([Ut.z.array(Ut.z.object({key:Ut.z.string(),value:go})).superRefine((o,t)=>{if(!o)return;let e={};o.forEach(({key:r},a)=>{e[r]||(e[r]=0),e[r]++,e[r]>1&&t.addIssue({code:Ut.z.ZodIssueCode.custom,message:`Duplicate key: ${r}`,path:[a,"key"]})})}),Ut.z.record(go)]).optional(),Sa=Ut.z.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(e=>e.value):t},rs).transform(o=>Array.isArray(o)?o.reduce((t,e)=>L(S({},t),{[e.key]:e.value}),{}):o),Ta=io.optional();var yo=wt.z.object({name:wt.z.string().nonempty({message:"A name is required."}),description:wt.z.string().optional(),image:Mt.optional(),external_url:Mt.optional()}).catchall(wt.z.lazy(()=>Rt)),as=yo.extend({id:W,uri:wt.z.string(),image:wt.z.string().optional(),external_url:wt.z.string().optional()}),lt=yo.extend({animation_url:Mt.optional(),background_color:co.optional(),properties:Sa}),Ir=wt.z.union([lt,wt.z.string()]),_r=as.extend({animation_url:wt.z.string().optional(),properties:Ta});var Or=require("@ethersproject/constants"),So=require("ethers");var wo=require("uuid"),Ke=require("ethers/lib/utils");function Co(o){if(o===void 0){let t=Buffer.alloc(16);return(0,wo.v4)({},t),(0,Ke.hexlify)((0,Ke.toUtf8Bytes)(t.toString("hex")))}else return(0,Ke.hexlify)(o)}c(Co,"resolveOrGenerateId");var Wa=$t.z.object({to:$t.z.string().default(Or.AddressZero),price:et.default(0),currencyAddress:$t.z.string().default(Ft),mintStartTime:kr,mintEndTime:mo,uid:$t.z.string().optional().transform(o=>Co(o)),primarySaleRecipient:$t.z.string().default(Or.AddressZero)}),Dr=Wa.extend({quantity:et}),ba=Dr.extend({mintStartTime:W,mintEndTime:W}),Je=Wa.extend({metadata:Ir,royaltyRecipient:$t.z.string().default(Or.AddressZero),royaltyBps:Lt.default(0)}),Nr=Je.extend({uri:$t.z.string(),royaltyBps:W,mintStartTime:W,mintEndTime:W}),Aa=Je.extend({tokenId:Wt.default(So.ethers.constants.MaxUint256),quantity:Wt}),va=Nr.extend({tokenId:W,quantity:W}),xa=[{name:"to",type:"address"},{name:"primarySaleRecipient",type:"address"},{name:"quantity",type:"uint256"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],Pa=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],Ea=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var A=pt.z.object({name:pt.z.string(),description:pt.z.string().optional(),image:Mt.optional(),external_link:pt.z.string().url().optional()}),I=A.extend({image:pt.z.string().optional()}).catchall(pt.z.lazy(()=>Rt)),v=pt.z.object({seller_fee_basis_points:Lt.default(0),fee_recipient:ct.default(ka.AddressZero)}),st=pt.z.object({primary_sale_recipient:ct}),k=pt.z.object({platform_fee_basis_points:Lt.default(0),platform_fee_recipient:ct.default(ka.AddressZero)}),_=pt.z.object({trusted_forwarders:pt.z.array(ct).default([])}),D=pt.z.object({symbol:pt.z.string().optional().default("")});var at=class{constructor(t,e){this.contractWrapper=t,this.metadata=e}async getDefaultRoyaltyInfo(){let[t,e]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return v.parse({fee_recipient:t,seller_fee_basis_points:e})}async getTokenRoyaltyInfo(t){let[e,r]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return v.parse({fee_recipient:e,seller_fee_basis_points:r})}async setDefaultRoyaltyInfo(t){let e=await this.metadata.get(),r=this.metadata.parseInputMetadata(S(S({},e),t)),a=await this.metadata._parseAndUploadMetadata(r),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[r.fee_recipient,r.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,e){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,e.fee_recipient,e.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};c(at,"ContractRoyalty");var ot=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};c(ot,"ContractPrimarySale");var jr=require("@thirdweb-dev/contracts"),ie=require("ethers");var Fo=require("@ethersproject/constants");var x=require("ethers");var Ae=require("@ethersproject/providers"),At=require("ethers"),To=require("eventemitter2");var Ye=require("@ethersproject/constants");var We="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",It="0x7c487845f98938Bb955B1D5AD069d9a30e4131fd",_t="0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65",Br={[y.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:_t,twRegistry:It},[y.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:_t,twRegistry:It},[y.Goerli]:{biconomyForwarder:Ye.AddressZero,twFactory:_t,twRegistry:It},[y.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:_t,twRegistry:It},[y.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:_t,twRegistry:It},[y.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:_t,twRegistry:It},[y.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:_t,twRegistry:It},[y.Fantom]:{biconomyForwarder:Ye.AddressZero,twFactory:_t,twRegistry:It},[y.FantomTestnet]:{biconomyForwarder:Ye.AddressZero,twFactory:_t,twRegistry:It}};function be(o,t){return o===y.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:Ye.AddressZero:Br[o][t]}c(be,"getContractAddressByChainId");var X=require("zod"),ft=X.z.object({readonlySettings:X.z.object({rpcUrl:X.z.string().url(),chainId:X.z.number().optional()}).optional(),gasSettings:X.z.object({maxPriceInGwei:X.z.number().min(1,"gas price cannot be less than 1").default(300),speed:X.z.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:X.z.union([X.z.object({openzeppelin:X.z.object({relayerUrl:X.z.string().url(),relayerForwarderAddress:X.z.string().default(We)})}),X.z.object({biconomy:X.z.object({apiId:X.z.string(),apiKey:X.z.string(),deadlineSeconds:X.z.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var Ot=class extends To.EventEmitter2{constructor(t,e){super();let[r,a]=this.getSignerAndProvider(t,e);this.signer=r,this.provider=a;try{this.options=ft.parse(e)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=ft.parse({})}}updateSignerOrProvider(t){let[e,r]=this.getSignerAndProvider(t,this.options);this.signer=e,this.provider=r}isReadOnly(){return!At.Signer.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,e){var n;let r,a;return At.Signer.isSigner(t)&&(r=t,t.provider&&(a=t.provider)),e!=null&&e.readonlySettings&&(a=this.getReadOnlyProvider(e.readonlySettings.rpcUrl,e.readonlySettings.chainId)),a||(Ae.Provider.isProvider(t)?a=t:At.Signer.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=e==null?void 0:e.readonlySettings)==null?void 0:n.chainId):a=At.ethers.getDefaultProvider(t))),a||(a=At.ethers.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[r,a]}getReadOnlyProvider(t,e){try{let r=t.match(/^(ws|http)s?:/i);if(r)switch(r[1]){case"http":return new Ae.JsonRpcBatchProvider(t,e);case"ws":return new Ae.WebSocketProvider(t,e);default:return At.ethers.getDefaultProvider(t)}else return At.ethers.getDefaultProvider(t)}catch{return At.ethers.getDefaultProvider(t)}}};c(Ot,"RPCConnectionHandler");var Ct;(function(o){o.Transaction="transaction",o.Signature="signature"})(Ct||(Ct={}));var oe=nt(require("tiny-invariant"));var Mr=require("ethers"),bo=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],Ao=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],ve={},Wo={};async function Ra(o,t,e){let r=e.join("|"),a=Wo[r],n=Date.now()-a>=2e3;if(!(r in ve)||n){let i=await o.functions[t](...e);Array.isArray(i)&&i.length>0?ve[r]=Mr.BigNumber.from(i[0]):ve[r]=Mr.BigNumber.from(i),Wo[r]=Date.now()}let s=ve[r];return ve[r]=Mr.BigNumber.from(ve[r]).add(1),s}c(Ra,"getAndIncrementNonce");var Ro=require("@thirdweb-dev/contracts");var vt=require("ethers");var Lr=require("ethers");async function Xe(o,t,e,r){var i,p;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=Lr.ethers.utils._TypedDataEncoder.getPayload(t,e,r),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,e,r)}catch(m){if((p=m==null?void 0:m.message)!=null&&p.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw m}return{payload:n,signature:Lr.ethers.utils.joinSignature(Lr.ethers.utils.splitSignature(s))}}c(Xe,"signTypedDataInternal");var os=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],ns=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],ss=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function is(o,t){let e=new vt.Contract(t,ss,o);try{return await e.nonces(await o.getAddress())}catch{return await e.getNonce(await o.getAddress())}}c(is,"getSignerNonce");async function cs(o,t){let e=new vt.Contract(t,ns,o);try{return await e.DOMAIN_SEPARATOR()}catch{return await e.getDomainSeperator()}}c(cs,"getDomainSeperator");async function ps(o,t){return new vt.Contract(t,os,o).name()}c(ps,"getTokenName");async function ms(o,t){let e=await cs(o,t.verifyingContract),r={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:vt.ethers.utils.hexZeroPad(vt.BigNumber.from(t.chainId).toHexString(),32)};return vt.ethers.utils._TypedDataEncoder.hashDomain(r)===e?r:t}c(ms,"getChainDomainSeperator");async function vo(o,t,e,r,a,n,s){let i=await ms(o,{name:await ps(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await is(o,t)).toString(),n=n!=null?n:vt.ethers.constants.MaxUint256;let p={owner:e,spender:r,value:a,nonce:s,deadline:n},m={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:d}=await Xe(o,i,m,p);return{message:p,signature:d}}c(vo,"signEIP2612Permit");var Ur=require("ethers");function ds(o){switch(o){case y.Polygon:return"https://gasstation-mainnet.matic.network/v2";case y.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}c(ds,"getGasStationUrl");var ls=Ur.ethers.utils.parseUnits("31","gwei"),us=Ur.ethers.utils.parseUnits("1","gwei");function hs(o){switch(o){case y.Polygon:return ls;case y.Mumbai:return us}}c(hs,"getDefaultGasFee");async function xo(o){let t=ds(o);try{let r=(await(await fetch(t)).json()).standard.maxPriorityFee;if(r>0){let a=parseFloat(r).toFixed(9);return Ur.ethers.utils.parseUnits(a,"gwei")}}catch(e){console.error("failed to fetch gas",e)}return hs(o)}c(xo,"getPolygonGasPriorityFee");var xe=require("ethers");var Pe={[y.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:xe.ethers.utils.parseEther("0.0001")},[y.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:xe.ethers.utils.parseEther("0.0001")},[y.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:xe.ethers.utils.parseEther("0.1")},[y.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:xe.ethers.utils.parseEther("2")},[y.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:xe.ethers.utils.parseEther("0.0001")}};var Fa=require("ethers/lib/utils"),Vt=(0,Fa.arrayify)("0x80ac58cd"),Gt=(0,Fa.arrayify)("0xd9b67a26");var Ia="https://gateway.ipfscdn.io/ipfs/",_a="https://upload.nftlabs.co",Oa="https://api.pinata.cloud/pinning/pinFileToIPFS";var Po=nt(require("merkletreejs"));var Eo=nt(require("keccak256")),tr=require("ethers");async function Da(o,t,e){let r=ae.parse(o),a=r.map(d=>d.address);if(new Set(a).size<a.length)throw new ge;let s=r.map(d=>ko(d.address,tr.ethers.utils.parseUnits(d.maxClaimable,t))),i=new Po.default(s,Eo.default,{sort:!0}),p=Se.parse({merkleRoot:i.getHexRoot(),claims:r.map((d,l)=>{let h=i.getHexProof(s[l]);return{address:d.address,maxClaimable:d.maxClaimable,proof:h}})}),m=await e.uploadMetadata(p);return{merkleRoot:i.getHexRoot(),snapshotUri:m,snapshot:p}}c(Da,"createSnapshot");function ko(o,t){return tr.ethers.utils.solidityKeccak256(["address","uint256"],[o,tr.BigNumber.from(t)])}c(ko,"hashLeafNode");var w=class extends Ot{customOverrides=()=>({});constructor(t,e,r,a){super(t,a),this.writeContract=new x.Contract(e,r,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:e}=await t.getNetwork();return e}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){if(Bt())return{};let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let r=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:x.ethers.utils.parseUnits("1","gwei"),s;r===y.Mumbai||r===y.Polygon?s=await xo(r):s=x.BigNumber.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a;switch(e){case"standard":a=x.BigNumber.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=x.ethers.utils.parseUnits(r.toString(),"gwei"),i=x.ethers.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(e){case"standard":n=x.BigNumber.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=x.ethers.utils.parseUnits(r.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,e){this.emit(Ct.Transaction,{status:t,transactionHash:e})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,e){return this.writeContract.estimateGas[t](...e)}withTransactionOverride(t){this.customOverrides=t}async sendTransaction(t,e,r){var a;if(r||(r=await this.getCallOverrides()),r=S(S({},r),this.customOverrides()),this.customOverrides=()=>({}),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,e,r);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,e,r);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,e,r){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...e,r)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),p=await this.readContract.address;throw await ha(n,s,i,p)}}async sendGaslessTransaction(t,e=[],r){let a=this.getSigner();(0,oe.default)(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,p=(r==null?void 0:r.value)||0;if(x.BigNumber.from(p).gt(0))throw new Error("Cannot send native token value with gasless transaction");let m=this.writeContract.interface.encodeFunctionData(t,e),d=await this.writeContract.estimateGas[t](...e),l=d.mul(2);d.lt(25e3)&&(l=x.BigNumber.from(5e5));let h={from:s,to:i,data:m,chainId:n,gasLimit:l,functionName:t.toString(),functionArgs:e,callOverrides:r};return await this.defaultGaslessSendFunction(h)}async signTypedData(t,e,r,a){this.emit(Ct.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await Xe(t,e,r,a);return this.emit(Ct.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,e){if(!e||e.length===0)return[];let r=this.writeContract.interface.getEventTopic(t);return e.filter(n=>n.topics.indexOf(r)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var l,h;(0,oe.default)(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();(0,oe.default)(e&&r,"signer and provider must be set");let a=new x.ethers.Contract(be(t.chainId,"biconomyForwarder"),Ao,r),n=0,s=await Ra(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:x.ethers.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((l=this.options)==null?void 0:l.gasless)&&"biconomy"in this.options.gasless&&((h=this.options.gasless.biconomy)==null?void 0:h.deadlineSeconds)||3600)),data:t.data},p=x.ethers.utils.arrayify(x.ethers.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,x.ethers.utils.keccak256(i.data)]));this.emit(Ct.Signature,{status:"submitted",message:p,signature:""});let m=await e.signMessage(p);this.emit(Ct.Signature,{status:"completed",message:p,signature:m});let d=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,m],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(d.ok){let g=await d.json();if(!g.txHash)throw new Error(`relay transaction failed: ${g.log}`);return g.txHash}throw new Error(`relay transaction failed with status: ${d.status} (${d.statusText})`)}async defenderSendFunction(t){(0,oe.default)(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();(0,oe.default)(e,"provider is not set"),(0,oe.default)(r,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=Ro.Forwarder__factory.connect(a,r),s=await Ra(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},p={ForwardRequest:bo},m={from:t.from,to:t.to,value:x.BigNumber.from(0).toString(),gas:x.BigNumber.from(t.gasLimit).toString(),nonce:x.BigNumber.from(s).toString(),data:t.data},d;if(this.emit(Ct.Signature,{status:"submitted",message:m,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let T=t.functionArgs[0],Tt=t.functionArgs[1],{message:gt,signature:ut}=await vo(e,this.writeContract.address,t.from,T,Tt),{r:Un,s:$n,v:Vn}=x.ethers.utils.splitSignature(ut);m={to:this.readContract.address,owner:gt.owner,spender:gt.spender,value:x.BigNumber.from(gt.value).toString(),nonce:x.BigNumber.from(gt.nonce).toString(),deadline:x.BigNumber.from(gt.deadline).toString(),r:Un,s:$n,v:Vn},d=ut}else{let{signature:T}=await Xe(e,i,p,m);d=T}let l="forward";m!=null&&m.owner&&(l="permit");let h=JSON.stringify({request:m,signature:d,type:l});this.emit(Ct.Signature,{status:"completed",message:m,signature:d});let g=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:h});if(g.ok){let T=await g.json();return JSON.parse(T.result).txHash}throw new Error(`relay transaction failed with status: ${g.status} (${g.statusText})`)}};c(w,"ContractWrapper");var Ee=require("ethers"),er=require("@thirdweb-dev/contracts");var Io=require("ethers/lib/utils");function xt(o){return o.toLowerCase()===Ft||o.toLowerCase()===Fo.AddressZero}c(xt,"isNativeToken");async function it(o,t,e){let r=await zt(o,e);return Ee.ethers.utils.parseUnits(et.parse(t),r.decimals)}c(it,"normalizePriceValue");async function zt(o,t){if(xt(t)){let e=await o.getNetwork(),r=ya(e.chainId);return{name:r.name,symbol:r.symbol,decimals:r.decimals}}else{let e=er.TokenERC20__factory.connect(t,o),[r,a,n]=await Promise.all([e.name(),e.symbol(),e.decimals()]);return{name:r,symbol:a,decimals:n}}}c(zt,"fetchCurrencyMetadata");async function H(o,t,e){let r=await zt(o,t);return L(S({},r),{value:Ee.BigNumber.from(e),displayValue:(0,Io.formatUnits)(e,r.decimals)})}c(H,"fetchCurrencyValue");async function St(o,t,e,r){if(xt(e))r.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,e,er.IERC20__factory.abi,{}),i=await o.getSignerAddress(),p=o.readContract.address;return(await s.readContract.allowance(i,p)).lt(t)&&await s.sendTransaction("approve",[p,t]),r}}c(St,"setErc20Allowance");async function _o(o,t,e,r){let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,t,er.IERC20__factory.abi,{}),i=await o.getSignerAddress(),p=o.readContract.address,m=await s.readContract.allowance(i,p),d=Ee.BigNumber.from(e).mul(Ee.BigNumber.from(r));m.lt(d)&&await s.sendTransaction("approve",[p,m.add(d)])}c(_o,"approveErc20Allowance");var rn=nt(require("deep-equal"));var Z;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})(Z||(Z={}));var Na;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(Na||(Na={}));var ne;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})(ne||(ne={}));var P;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(P||(P={}));var N=require("ethers"),Oo=require("@ethersproject/bytes"),Ba=require("@ethersproject/constants");function Pt(o,t){return fs(o.readContract,t)}c(Pt,"implementsInterface");function fs(o,t){let e=o.interface.functions,r=t.functions;return Object.keys(e).filter(a=>a in r).length===Object.keys(r).length}c(fs,"matchesInterface");var Do=require("@thirdweb-dev/contracts");async function ke(o,t,e,r,a,n=[(0,Oo.hexZeroPad)([0],32)]){let s=await r.getSignerAddress(),i=0;Pt(r,Do.DropERC20__factory.createInterface())&&(i=await r.readContract.decimals());let p=N.BigNumber.from(0);try{if(!t.merkleRootHash.toString().startsWith(Ba.AddressZero)){let h=await Ma(t.merkleRootHash.toString(),e,a),g=h&&h.find(T=>T.address.toLowerCase()===s.toLowerCase());if(g===void 0)throw new Error("No claim found for this address");n=g.proof,p=N.ethers.utils.parseUnits(g.maxClaimable,i)}}catch(h){if((h==null?void 0:h.message)==="No claim found for this address")throw h;console.warn("failed to check claim condition merkle root hash, continuing anyways",h)}let m=await r.getCallOverrides()||{},d=t.price,l=t.currencyAddress;return d.gt(0)&&(xt(l)?m.value=N.BigNumber.from(d).mul(o):await _o(r,l,d,o)),{overrides:m,proofs:n,maxQuantityPerTransaction:p,price:d,currencyAddress:l}}c(ke,"prepareClaim");async function Ma(o,t,e){let r=t[o],a;if(r){let n=await e.get(r),s=Se.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}c(Ma,"fetchSnapshot");async function $r(o,t,e,r){if(o>=e.length)throw Error(`Index out of bounds - got index: ${o} with ${e.length} conditions`);let a=c(l=>l.toHexString()===N.ethers.constants.MaxUint256.toHexString()?"unlimited":N.ethers.utils.formatUnits(l,r).replace(".0",""),"revertToFormattedAmount"),n=c(l=>l==="unlimited"?N.ethers.constants.MaxUint256:N.ethers.utils.parseUnits(l,r),"convertBackToBigNumber"),s=e[o].currencyMetadata.decimals,i=e[o].price,p=N.ethers.utils.formatUnits(i,s),m=Te.parse(S(L(S({},e[o]),{price:p,maxQuantity:a(e[o].maxQuantity),quantityLimitPerTransaction:a(e[o].quantityLimitPerTransaction)}),t)),d=Fr.parse(L(S({},m),{price:i,maxQuantity:n(m.maxQuantity),quantityLimitPerTransaction:n(m.quantityLimitPerTransaction)}));return e.map((l,h)=>{let g;h===o?g=d:g=l;let T=N.ethers.utils.formatUnits(g.price,s);return L(S({},g),{price:T,maxQuantity:a(g.maxQuantity),quantityLimitPerTransaction:a(g.quantityLimitPerTransaction)})})}c($r,"updateExistingClaimConditions");async function Vr(o,t,e,r,a){let n=await Ma(t,r,a);if(n===void 0)return{proof:[],maxClaimable:N.BigNumber.from(0)};let s=n.find(i=>i.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return s===void 0?{proof:[],maxClaimable:N.BigNumber.from(0)}:{proof:s.proof,maxClaimable:N.ethers.utils.parseUnits(s.maxClaimable,e)}}c(Vr,"getClaimerProofs");async function Gr(o,t,e,r){let a=[],n=await Promise.all(o.map(async p=>{if(p.snapshot){let m=await Da(ae.parse(p.snapshot),t,r);a.push(m),p.merkleRootHash=m.merkleRoot}return p})),s=Ca.parse(n),i=(await Promise.all(s.map(p=>gs(p,t,e)))).sort((p,m)=>{let d=N.BigNumber.from(p.startTimestamp),l=N.BigNumber.from(m.startTimestamp);return d.eq(l)?0:d.gt(l)?1:-1});return{snapshotInfos:a,sortedConditions:i}}c(Gr,"processClaimConditionInputs");async function gs(o,t,e){let r=o.currencyAddress===Ba.AddressZero?Ft:o.currencyAddress,a,n;return o.maxQuantity==="unlimited"?a=N.ethers.constants.MaxUint256.toString():a=N.ethers.utils.parseUnits(o.maxQuantity,t),o.quantityLimitPerTransaction==="unlimited"?n=N.ethers.constants.MaxUint256.toString():n=N.ethers.utils.parseUnits(o.quantityLimitPerTransaction,t),{startTimestamp:o.startTime,maxClaimableSupply:a,supplyClaimed:0,quantityLimitPerTransaction:n,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await it(e,o.price,r),currency:r,merkleRoot:o.merkleRootHash}}c(gs,"convertToContractModel");async function Re(o,t,e,r){let a=await H(t,o.currency,o.pricePerToken),n=await Ma(o.merkleRoot,e,r);return Fr.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:N.BigNumber.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:N.BigNumber.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}c(Re,"transformResultToClaimCondition");var an=require("@ethersproject/constants");var No=A.merge(v).merge(dt).merge(D),ys=I.merge(v).merge(dt).merge(D),ws=No.merge(k).merge(st).merge(_),Bo={deploy:ws,output:ys,input:No};var Mo=A.merge(v).merge(dt).merge(D),Cs=I.merge(v).merge(dt).merge(D),Ss=Mo.merge(k).merge(st).merge(_),Lo={deploy:Ss,output:Cs,input:Mo};var Uo=A,Ts=I,Ws=Uo.merge(k).merge(_),$o={deploy:Ws,output:Ts,input:Uo};var Vo=A.merge(v).merge(D),bs=I.merge(v).merge(D),As=Vo.merge(k).merge(_),Go={deploy:As,output:bs,input:Vo};var se=require("zod");var zo=se.z.object({address:ct,sharesBps:Lt.gt(0,"Shares must be greater than 0")}),vs=zo.extend({address:ct,sharesBps:Lt}),La=A.extend({recipients:se.z.array(zo).default([]).superRefine((o,t)=>{let e={},r=0;for(let a=0;a<o.length;a++){let n=o[a];e[n.address]&&t.addIssue({code:se.z.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),e[n.address]=!0,r+=n.sharesBps,r>1e4&&t.addIssue({code:se.z.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}r!==1e4&&t.addIssue({code:se.z.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${r/100}%`,path:[]})})}),xs=I.extend({recipients:se.z.array(vs)}),Ps=La.merge(k).merge(La).merge(_),jo={deploy:Ps,output:xs,input:La};var Ho=A.merge(D),Es=I.merge(D),ks=Ho.merge(k).merge(st).merge(_),Zo={deploy:ks,output:Es,input:Ho};var qo=A.merge(v).merge(D),Rs=I.merge(v).merge(D),Fs=qo.merge(k).merge(st).merge(_),Qo={deploy:Fs,output:Rs,input:qo};var Ko=A.merge(v),Is=I.merge(v),_s=Ko.merge(k).merge(st).merge(_),Jo={deploy:_s,output:Is,input:Ko};var mt=require("zod"),Yo=mt.z.object({voting_delay_in_blocks:mt.z.number().min(0).default(0),voting_period_in_blocks:mt.z.number().min(1).default(1),voting_token_address:ct,voting_quorum_fraction:so.default(0),proposal_token_threshold:Wt.default(1)}),Os=Yo.extend({proposal_token_threshold:W}),Xo=A.merge(Yo),Ds=I.merge(Os),Ns=Xo.merge(_),tn={deploy:Ns,output:Ds,input:Xo},Jc=mt.z.object({proposalId:W,proposer:mt.z.string(),targets:mt.z.array(mt.z.string()),values:mt.z.array(W),signatures:mt.z.array(mt.z.string()),calldatas:mt.z.array(mt.z.string()),startBlock:W,endBlock:W,description:mt.z.string()});var rr=require("zod");var zr=rr.z.object({supply:W,metadata:_r}),Bs=zr.extend({owner:rr.z.string(),quantityOwned:W}),Ms=rr.z.object({supply:Wt,metadata:lt}),Ls=rr.z.object({supply:Wt,metadata:Ir});var en=require("zod");var Us=en.z.object({toAddress:ct,amount:et});var jt=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),e=await this.contractWrapper.readContract.getClaimConditionById(t),r=await this.metadata.get();return await Re(e,this.contractWrapper.getProvider(),r.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),e=t.currentStartId.toNumber(),r=t.count.toNumber(),a=[];for(let s=e;s<e+r;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>Re(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e)).length===0}async getClaimIneligibilityReasons(t,e){let r=[],a,n,s=ie.ethers.utils.parseUnits(et.parse(t),await this.getTokenDecimals());e===void 0&&(e=await this.contractWrapper.getSignerAddress());try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(l){return ee(l,"no public mint condition.")?(r.push(P.NoClaimConditionSet),r):ee(l,"no active mint condition.")?(r.push(P.NoActiveClaimPhase),r):(r.push(P.Unknown),r)}if(ie.BigNumber.from(n.availableSupply).lt(s)&&r.push(P.NotEnoughSupply),ie.ethers.utils.stripZeros(n.merkleRootHash).length>0){let l=n.merkleRootHash.toString(),h=await this.metadata.get(),g=await Vr(e,l,await this.getTokenDecimals(),h.merkle,this.storage);try{let[T]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,e,t,g.proof,g.maxClaimable);if(!T)return r.push(P.AddressNotAllowed),r}catch{return r.push(P.AddressNotAllowed),r}}let[p,m]=await this.contractWrapper.readContract.getClaimTimestamp(a,e),d=ie.BigNumber.from(Date.now()).div(1e3);if(p.gt(0)&&d.lt(m)&&(m.eq(an.MaxUint256)?r.push(P.AlreadyClaimed):r.push(P.WaitBeforeNextClaimTransaction)),n.price.gt(0)&&!Bt()){let l=n.price.mul(ie.BigNumber.from(t)),h=this.contractWrapper.getProvider();xt(n.currencyAddress)?(await h.getBalance(e)).lt(l)&&r.push(P.NotEnoughTokens):(await new w(h,n.currencyAddress,jr.IERC20__factory.abi,{}).readContract.balanceOf(e)).lt(l)&&r.push(P.NotEnoughTokens)}return r}async set(t,e=!1){let{snapshotInfos:r,sortedConditions:a}=await Gr(t,await this.getTokenDecimals(),this.contractWrapper.getProvider(),this.storage),n={};r.forEach(p=>{n[p.merkleRoot]=p.snapshotUri});let s=await this.metadata.get(),i=[];if(!(0,rn.default)(s.merkle,n)){let p=this.metadata.parseInputMetadata(L(S({},s),{merkle:n})),m=await this.metadata._parseAndUploadMetadata(p);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,e])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,e){let r=await this.getAll(),a=await $r(t,e,r,await this.getTokenDecimals());return await this.set(a)}async getTokenDecimals(){return Pt(this.contractWrapper,jr.DropERC20__factory.createInterface())?this.contractWrapper.readContract.decimals():Promise.resolve(0)}};c(jt,"DropClaimConditions");var on=require("@thirdweb-dev/contracts"),ar=require("ethers");var nn=nt(require("deep-equal"));var sn=require("@ethersproject/constants");var Fe=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(t){let e=await this.contractWrapper.readContract.getActiveClaimConditionId(t),r=await this.contractWrapper.readContract.getClaimConditionById(t,e),a=await this.metadata.get();return await Re(r,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let e=await this.contractWrapper.readContract.claimCondition(t),r=e.currentStartId.toNumber(),a=e.count.toNumber(),n=[];for(let i=r;i<r+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>Re(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,e,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e,r)).length===0}async getClaimIneligibilityReasons(t,e,r){let a=[],n,s;r===void 0&&(r=await this.contractWrapper.getSignerAddress());try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(l){return ee(l,"no public mint condition.")?(a.push(P.NoClaimConditionSet),a):ee(l,"no active mint condition.")?(a.push(P.NoActiveClaimPhase),a):(a.push(P.Unknown),a)}if(ar.BigNumber.from(s.availableSupply).lt(e)&&a.push(P.NotEnoughSupply),ar.ethers.utils.stripZeros(s.merkleRootHash).length>0){let l=s.merkleRootHash.toString(),h=await this.metadata.get(),g=await Vr(r,l,0,h.merkle,this.storage);try{let[T]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,r,t,e,g.proof,g.maxClaimable);if(!T)return a.push(P.AddressNotAllowed),a}catch{return a.push(P.AddressNotAllowed),a}}let[p,m]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,r),d=ar.BigNumber.from(Date.now()).div(1e3);if(p.gt(0)&&d.lt(m)&&(m.eq(sn.MaxUint256)?a.push(P.AlreadyClaimed):a.push(P.WaitBeforeNextClaimTransaction)),s.price.gt(0)&&!Bt()){let l=s.price.mul(e),h=this.contractWrapper.getProvider();xt(s.currencyAddress)?(await h.getBalance(r)).lt(l)&&a.push(P.NotEnoughTokens):(await new w(h,s.currencyAddress,on.IERC20__factory.abi,{}).readContract.balanceOf(r)).lt(l)&&a.push(P.NotEnoughTokens)}return a}async set(t,e,r=!1){let{snapshotInfos:a,sortedConditions:n}=await Gr(e,0,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(m=>{s[m.merkleRoot]=m.snapshotUri});let i=await this.metadata.get(),p=[];for(let m of Object.keys(i.merkle))s[m]=i.merkle[m];if(!(0,nn.default)(i.merkle,s)){let m=this.metadata.parseInputMetadata(L(S({},i),{merkle:s})),d=await this.metadata._parseAndUploadMetadata(m);p.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return p.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,r])),{receipt:await this.contractWrapper.multiCall(p)}}async update(t,e,r){let a=await this.getAll(t),n=await $r(e,r,a,0);return await this.set(t,n)}};c(Fe,"DropErc1155ClaimConditions");var cn=require("ethers"),Ie=class{constructor(t){this.contractWrapper=t}async getAllClaimerAddresses(t){let e=await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.TokensClaimed(null,cn.BigNumber.from(t)));return Array.from(new Set(e.map(r=>r.args.claimer)))}};c(Ie,"DropErc1155History");var Hr=require("ethers");var pn=require("@ethersproject/constants");var Ht=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=ft.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ft.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await zt(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,e){return await this.getValue(await this.contractWrapper.readContract.allowance(t,e))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(j("transfer"),pn.AddressZero)}async transfer(t,e){return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,await this.normalizeAmount(e)])}}async transferFrom(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,e,await this.normalizeAmount(r)])}}async setAllowance(t,e){return{receipt:await this.contractWrapper.sendTransaction("approve",[t,await this.normalizeAmount(e)])}}async transferBatch(t){let e=await Promise.all(t.map(async r=>{let a=await this.normalizeAmount(r.amount);return this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[r.toAddress,a])}));await this.contractWrapper.multiCall(e)}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[await this.normalizeAmount(t)])}}async burnFrom(t,e){return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,await this.normalizeAmount(e)])}}async getValue(t){return await H(this.contractWrapper.getProvider(),this.getAddress(),Hr.BigNumber.from(t))}async normalizeAmount(t){let e=await this.contractWrapper.readContract.decimals();return Hr.ethers.utils.parseUnits(et.parse(t),e)}};c(Ht,"Erc20");var Ua=require("ethers"),$a=require("@ethersproject/constants");var _e=class{constructor(t){this.contractWrapper=t}async getAllHolderBalances(){let e=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.Transfer())).map(a=>a.args),r={};return e.forEach(a=>{let n=a.from,s=a.to,i=a.value;n!==$a.AddressZero&&(n in r||(r[n]=Ua.BigNumber.from(0)),r[n]=r[n].sub(i)),s!==$a.AddressZero&&(s in r||(r[s]=Ua.BigNumber.from(0)),r[s]=r[s].add(i))}),Promise.all(Object.keys(r).map(async a=>({holder:a,balance:await H(this.contractWrapper.getProvider(),this.contractWrapper.readContract.address,r[a])})))}};c(_e,"TokenERC20History");var Va=require("ethers"),Ga=require("@ethersproject/constants");var Oe=100;var mn=require("ethers");var De=require("@thirdweb-dev/contracts");async function ce(o,t,e){let r=await e.get(t);return _r.parse(S({id:mn.BigNumber.from(o),uri:t},r))}c(ce,"fetchTokenMetadata");async function Zt(o,t,e,r){let a,n=De.ERC165__factory.connect(o,t),s=await n.supportsInterface(Vt),i=await n.supportsInterface(Gt);if(s)a=await De.TokenERC721__factory.connect(o,t).tokenURI(e);else if(i)a=await De.TokenERC1155__factory.connect(o,t).uri(e);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new ht;return ce(e,a,r)}c(Zt,"fetchTokenMetadataForContract");async function Zr(o,t){return typeof o=="string"?o:await t.uploadMetadata(lt.parse(o))}c(Zr,"uploadOrExtractURI");async function qt(o,t){if($s(o))return o;if(Vs(o)){let{metadataUris:e}=await t.uploadMetadataBatch(o.map(r=>lt.parse(r)));return e}else throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}c(qt,"uploadOrExtractURIs");function $s(o){return o.find(t=>typeof t!="string")===void 0}c($s,"isUriList");function Vs(o){return o.find(t=>typeof t!="object")===void 0}c(Vs,"isMetadataList");var Qt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=ft.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ft.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.ownerOf(t).catch(()=>Ga.AddressZero),this.getTokenMetadata(t)]);return{owner:e,metadata:r}}async getAll(t){let e=Va.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Va.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.balanceOf(e),a=Array.from(Array(r.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(e,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(j("transfer"),Ga.AddressZero)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[r,t,e])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);if(!e)throw new ht;return ce(t,e,this.storage)}};c(Qt,"Erc721");var qr=require("ethers");var dn=require("@ethersproject/constants");var za;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(za||(za={}));var Kt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=ft.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ft.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>qr.BigNumber.from(0)),this.getTokenMetadata(t)]);return zr.parse({supply:e,metadata:r})}async getAll(t){let e=qr.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=qr.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return L(S({},i),{owner:e,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(j("transfer"),dn.AddressZero)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e,r,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,e,r,a])}}async burn(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[r,t,e])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.uri(t);if(!e)throw new ht;return ce(t,e,this.storage)}};c(Kt,"Erc1155");var or=require("ethers"),ln=nt(require("tiny-invariant")),Ne=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();return await St(this.contractWrapper,or.BigNumber.from(a.price),e.currencyAddress,n),{receipt:await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n)}}async mintBatch(t){let r=(await Promise.all(t.map(async a=>{let n=await this.mapPayloadToContractStruct(a.payload),s=a.signature,i=a.payload.price;if(or.BigNumber.from(i).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:n,signature:s}}))).map(a=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[a.message,a.signature]));return{receipt:await this.contractWrapper.multiCall(r)}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>Dr.parse(s)),r=await this.contractWrapper.getChainID(),a=this.contractWrapper.getSigner();(0,ln.default)(a,"No signer available");let n=await this.contractWrapper.readContract.name();return await Promise.all(e.map(async s=>{let i=ba.parse(s),p=await this.contractWrapper.signTypedData(a,{name:n,version:"1",chainId:r,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:xa},await this.mapPayloadToContractStruct(i));return{payload:i,signature:p.toString()}}))}async mapPayloadToContractStruct(t){let e=await it(this.contractWrapper.getProvider(),t.price,t.currencyAddress),r=or.ethers.utils.parseUnits(t.quantity,await this.contractWrapper.readContract.decimals());return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:r,price:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid}}};c(Ne,"Erc20SignatureMinting");var ja=require("ethers"),un=nt(require("tiny-invariant"));var Be=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await St(this.contractWrapper,ja.BigNumber.from(a.price),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let r=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),p=s.signature,m=s.payload.price;if(ja.BigNumber.from(m).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:p}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(r),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(i=>Je.parse(i)),r=e.map(i=>i.metadata),a=await qt(r,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,un.default)(s,"No signer available"),await Promise.all(e.map(async(i,p)=>{let m=a[p],d=Nr.parse(L(S({},i),{uri:m})),l=await this.contractWrapper.signTypedData(s,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:Pa},await this.mapPayloadToContractStruct(d));return{payload:d,signature:l.toString()}}))}async mapPayloadToContractStruct(t){let e=await it(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:e,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};c(Be,"Erc721SignatureMinting");var hn=nt(require("tiny-invariant")),fn=require("ethers");var Me=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await St(this.contractWrapper,a.pricePerToken.mul(a.quantity),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let r=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),p=s.signature,m=s.payload.price;if(fn.BigNumber.from(m).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:p}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(r),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(i=>Aa.parse(i)),r=e.map(i=>i.metadata),a=await qt(r,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,hn.default)(s,"No signer available"),await Promise.all(e.map(async(i,p)=>{let m=a[p],d=va.parse(L(S({},i),{uri:m})),l=await this.contractWrapper.signTypedData(s,{name:"TokenERC1155",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:Ea},await this.mapPayloadToContractStruct(d));return{payload:d,signature:l.toString()}}))}async mapPayloadToContractStruct(t){let e=await it(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};c(Me,"Erc1155SignatureMinting");var Ue=require("@thirdweb-dev/contracts"),Et=require("ethers"),Ha=require("@ethersproject/constants");var Qr=require("ethers"),Dt=require("@thirdweb-dev/contracts");var Jt=nt(require("tiny-invariant"));async function gn(o,t,e,r,a){try{let n=Dt.ERC165__factory.connect(e,o),s=await n.supportsInterface(Vt),i=await n.supportsInterface(Gt);if(s){let p=Dt.IERC721__factory.connect(e,o);return await p.isApprovedForAll(a,t)?!0:(await p.getApproved(r)).toLowerCase()===t.toLowerCase()}else return i?await Dt.IERC1155__factory.connect(e,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}c(gn,"isTokenApprovedForMarketplace");async function Kr(o,t,e,r,a){let n=Dt.ERC165__factory.connect(e,o),s=await n.supportsInterface(Vt),i=await n.supportsInterface(Gt);if(s){let p=new w(o,e,Dt.IERC721__factory.abi,{});await p.readContract.isApprovedForAll(a,t)||(await p.readContract.getApproved(r)).toLowerCase()===t.toLowerCase()||await p.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let p=new w(o,e,Dt.IERC1155__factory.abi,{});await p.readContract.isApprovedForAll(a,t)||await p.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}c(Kr,"handleTokenApproval");function Jr(o){switch((0,Jt.default)(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),(0,Jt.default)(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),(0,Jt.default)(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),(0,Jt.default)(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),(0,Jt.default)(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),(0,Jt.default)(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":(0,Jt.default)(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}c(Jr,"validateNewListingParam");async function Yr(o,t,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await H(o,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:t}}c(Yr,"mapOffer");function yn(o,t,e){return e=Qr.BigNumber.from(e),o=Qr.BigNumber.from(o),t=Qr.BigNumber.from(t),t.sub(o).mul(fa).div(o).gte(e)}c(yn,"isWinningBid");var wn=nt(require("tiny-invariant")),Cn=require("ethers/lib/utils"),Le=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===Ha.AddressZero)throw new yt(this.getAddress(),t.toString());if(e.listingType!==Z.Direct)throw new Nt(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(e)}async getActiveOffer(t,e){await this.validateListing(Et.BigNumber.from(t)),(0,wn.default)((0,Cn.isAddress)(e),"Address must be a valid address");let r=await this.contractWrapper.readContract.offers(t,e);if(r.offeror!==Ha.AddressZero)return await Yr(this.contractWrapper.getProvider(),Et.BigNumber.from(t),r)}async createListing(t){Jr(t),await Kr(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await it(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:Z.Direct,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",r==null?void 0:r.logs)[0].args.listingId,receipt:r}}async makeOffer(t,e,r,a){if(xt(r))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await it(this.contractWrapper.getProvider(),a,r);try{await this.getListing(t)}catch(m){throw console.error("Failed to get listing, err =",m),new Error(`Error getting the listing with id ${t}`)}let s=Et.BigNumber.from(e),i=Et.BigNumber.from(n).mul(s),p=await this.contractWrapper.getCallOverrides()||{};return await St(this.contractWrapper,i,r,p),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e,r,n],p)}}async acceptOffer(t,e){await this.validateListing(Et.BigNumber.from(t));let r=await this.contractWrapper.readContract.offers(t,e);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,e,r.currency,r.pricePerToken])}}async buyoutListing(t,e,r){let a=await this.validateListing(Et.BigNumber.from(t));if(!await this.isStillValidListing(a,e))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=r||await this.contractWrapper.getSignerAddress(),i=Et.BigNumber.from(e),p=Et.BigNumber.from(a.buyoutPrice).mul(i),m=await this.contractWrapper.getCallOverrides()||{};return await St(this.contractWrapper,p,a.currencyContractAddress,m),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,p],m)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:Et.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await H(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await Zt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:Z.Direct}}async isStillValidListing(t,e){if(!await gn(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=Ue.ERC165__factory.connect(t.assetContractAddress,a),s=await n.supportsInterface(Vt),i=await n.supportsInterface(Gt);return s?(await Ue.IERC721__factory.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await Ue.IERC1155__factory.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(e||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};c(Le,"MarketplaceDirect");var tt=require("ethers");var Za=require("@ethersproject/constants");var qa=nt(require("tiny-invariant")),$e=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.listingId.toString()!==t.toString())throw new yt(this.getAddress(),t.toString());if(e.listingType!==Z.Auction)throw new Nt(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(e)}async getWinningBid(t){await this.validateListing(tt.BigNumber.from(t));let e=await this.contractWrapper.readContract.winningBid(t);if(e.offeror!==Za.AddressZero)return await Yr(this.contractWrapper.getProvider(),tt.BigNumber.from(t),e)}async getWinner(t){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq(tt.BigNumber.from(t)));if(!r)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return r.args.winningBidder}async createListing(t){Jr(t),await Kr(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await it(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await it(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:Z.Auction,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let e=await this.validateListing(tt.BigNumber.from(t)),r=await zt(this.contractWrapper.getProvider(),e.currencyContractAddress);return this.makeBid(t,tt.ethers.utils.formatUnits(e.buyoutPrice,r.decimals))}async makeBid(t,e){let r=await this.validateListing(tt.BigNumber.from(t)),a=await it(this.contractWrapper.getProvider(),e,r.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let d=yn(s.pricePerToken,a,n);(0,qa.default)(d,"Bid price is too low based on the current winning bid and the bid buffer")}else{let d=a,l=tt.BigNumber.from(r.reservePrice);(0,qa.default)(d.gte(l),"Bid price is too low based on reserve price")}let i=tt.BigNumber.from(r.quantity),p=a.mul(i),m=await this.contractWrapper.getCallOverrides()||{};return await St(this.contractWrapper,p,r.currencyContractAddress,m),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r.quantity,r.currencyContractAddress,a],m)}}async cancelListing(t){let e=await this.validateListing(tt.BigNumber.from(t)),r=tt.BigNumber.from(Math.floor(Date.now()/1e3)),a=tt.BigNumber.from(e.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(r.gt(a)&&n.offeror!==Za.AddressZero)throw new ye(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[tt.BigNumber.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,e){e||(e=await this.contractWrapper.getSignerAddress());let r=await this.validateListing(tt.BigNumber.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[tt.BigNumber.from(t),e])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new we(t.toString(),r.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:tt.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await H(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await Zt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await H(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:tt.BigNumber.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:Z.Auction}}};c($e,"MarketplaceAuction");var Sn=require("@thirdweb-dev/contracts");var Tn=require("ethers/lib/utils"),Wn=require("@ethersproject/constants"),nr=class extends w{constructor(t,e,r){super(e,t,Sn.TWRegistry__factory.abi,r)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(e=>(0,Tn.isAddress)(e)&&e.toLowerCase()!==Wn.AddressZero)}};c(nr,"ContractRegistry");var Nn=require("@thirdweb-dev/contracts"),wr=require("ethers");var bn=require("@thirdweb-dev/contracts");var B=class{constructor(t){this.contractWrapper=t}addListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.on(r.name,(...a)=>{let n={};r.inputs.map(s=>s.name).forEach((s,i)=>{n[s]=a[i]}),e(n)})}removeListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(r.name,e)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners()}};c(B,"ContractEvents");var U=class{constructor(t){this.contractWrapper=t}async get(){let[t,e]=await this.contractWrapper.readContract.getPlatformFeeInfo();return k.parse({platform_fee_recipient:t,platform_fee_basis_points:e})}async set(t){let e=k.parse(t);return{receipt:await this.contractWrapper.sendTransaction("setPlatformFeeInfo",[e.platform_fee_recipient,e.platform_fee_basis_points])}}};c(U,"ContractPlatformFee");var sr=class extends Qt{constructor(t,e,r,a={},n=new w(t,e,sr.contractFactory.abi,a)){super(n,r,a),this.metadata=new b(this.contractWrapper,sr.schema,this.storage),this.roles=new O(this.contractWrapper,sr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ot(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.signature=new Be(this.contractWrapper,this.roles,this.storage),this.events=new B(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await Zr(e,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,r]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let a=(await qt(e,this.storage)).map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<e.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let p=i.args.tokenIdMinted;return{id:p,receipt:n,data:()=>this.get(p)}})}},q=sr;c(q,"NFTCollection"),f(q,"contractType","nft-collection"),f(q,"contractRoles",["admin","minter","transfer"]),f(q,"contractFactory",bn.TokenERC721__factory),f(q,"schema",Qo);var An=require("@thirdweb-dev/contracts");var Xr=require("ethers/lib/utils");var Qa=require("ethers"),R=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,e){let r=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,e);return Qa.ethers.utils.formatEther(a.mul(r))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Qa.ethers.utils.formatUnits(t,"gwei")}};c(R,"GasCostEstimator");var F=class{constructor(t){this.contractWrapper=t}overrideNextTransaction(t){this.contractWrapper.withTransactionOverride(t)}};c(F,"ContractInterceptor");var ir=class extends Kt{constructor(t,e,r,a={},n=new w(t,e,ir.contractFactory.abi,a)){super(n,r,a),this.metadata=new b(this.contractWrapper,ir.schema,this.storage),this.roles=new O(this.contractWrapper,ir.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ot(this.contractWrapper),this.claimConditions=new Fe(this.contractWrapper,this.metadata,this.storage),this.history=new Ie(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.events=new B(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}async createBatch(t){var m;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(d=>lt.parse(d)),e.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,`${r.baseUri.endsWith("/")?r.baseUri:`${r.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,p=[];for(let d=s;d.lte(i);d=d.add(1))p.push({id:d,receipt:a,data:()=>this.getTokenMetadata(d)});return p}async claimTo(t,e,r,a=[(0,Xr.hexZeroPad)([0],32)]){let n=await this.prepareClaim(e,r,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,e,r,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,e,r=[(0,Xr.hexZeroPad)([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,e,r)}async prepareClaim(t,e,r=[(0,Xr.hexZeroPad)([0],32)]){return ke(e,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},M=ir;c(M,"EditionDrop"),f(M,"contractType","edition-drop"),f(M,"contractRoles",["admin","minter","transfer"]),f(M,"contractFactory",An.DropERC1155__factory),f(M,"schema",Lo);var vn=require("@thirdweb-dev/contracts");var pr=require("ethers");var cr=class extends Kt{constructor(t,e,r,a={},n=new w(t,e,cr.contractFactory.abi,a)){super(n,r,a),this.metadata=new b(this.contractWrapper,cr.schema,this.storage),this.roles=new O(this.contractWrapper,cr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ot(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new B(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.signature=new Me(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await Zr(e.metadata,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,pr.ethers.constants.MaxUint256,r,e.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,e){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,e)}async mintAdditionalSupplyTo(t,e,r){let a=await this.getTokenMetadata(e),n=await this.contractWrapper.sendTransaction("mintTo",[t,e,a.uri,r]);return{id:pr.BigNumber.from(e),receipt:n,data:()=>this.get(e)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let r=e.map(m=>m.metadata),a=e.map(m=>m.supply),s=(await qt(r,this.storage)).map((m,d)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,pr.ethers.constants.MaxUint256,m,a[d]])),i=await this.contractWrapper.multiCall(s),p=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(p.length===0||p.length<r.length)throw new Error("TokenMinted event not found, minting failed");return p.map(m=>{let d=m.args.tokenIdMinted;return{id:d,receipt:i,data:()=>this.get(d)}})}},Q=cr;c(Q,"Edition"),f(Q,"contractType","edition"),f(Q,"contractRoles",["admin","minter","transfer"]),f(Q,"contractFactory",vn.TokenERC1155__factory),f(Q,"schema",Jo);var xn=require("@thirdweb-dev/contracts");var mr=class extends Ht{constructor(t,e,r,a={},n=new w(t,e,mr.contractFactory.abi,a)){super(n,r,a),this.metadata=new b(this.contractWrapper,mr.schema,this.storage),this.roles=new O(this.contractWrapper,mr.contractRoles),this.history=new _e(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new B(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.signature=new Ne(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,await this.normalizeAmount(e)])}}async mintBatchTo(t){let e=[];for(let r of t)e.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[r.toAddress,await this.normalizeAmount(r.amount)]));return{receipt:await this.contractWrapper.multiCall(e)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},$=mr;c($,"Token"),f($,"contractType","token"),f($,"contractRoles",["admin","minter","transfer"]),f($,"contractFactory",xn.TokenERC20__factory),f($,"schema",Zo);var kn=require("@thirdweb-dev/contracts");var Pn=A.merge(v).merge(dt).merge(D),Gs=I.merge(v).merge(dt).merge(D),zs=Pn.merge(k).merge(st).merge(_),En={deploy:zs,output:Gs,input:Pn};var ta=require("@ethersproject/bytes");var dr=class extends Ht{constructor(t,e,r,a={},n=new w(t,e,dr.contractFactory.abi,a)){super(n,r,a),this.metadata=new b(this.contractWrapper,dr.schema,this.storage),this.roles=new O(this.contractWrapper,dr.contractRoles),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.sales=new ot(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.claimConditions=new jt(this.contractWrapper,this.metadata,this.storage)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async claim(t,e=[(0,ta.hexZeroPad)([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async claimTo(t,e,r=[(0,ta.hexZeroPad)([0],32)]){let a=await this.normalizeAmount(e),n=await this.prepareClaim(a,r);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,a,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}async prepareClaim(t,e=[(0,ta.hexZeroPad)([0],32)]){return ke(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},K=dr;c(K,"TokenDrop"),f(K,"contractType","token-drop"),f(K,"contractRoles",["admin","transfer"]),f(K,"contractFactory",kn.DropERC20__factory),f(K,"schema",En);var ra=require("@thirdweb-dev/contracts");var pe=require("ethers");var Rn=nt(require("deep-equal"));var ea=class{constructor(t,e,r,a={},n=new w(t,e,ea.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new b(this.contractWrapper,ea.schema,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new B(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let r=(await this.getAll()).filter(a=>(0,Rn.default)(pe.BigNumber.from(a.proposalId),pe.BigNumber.from(t)));if(r.length===0)throw new Error("proposal not found");return r[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((e,r)=>({toAddress:t.targets[r],nativeTokenValue:e,transactionData:t.calldatas[r]}))})))}async getProposalVotes(t){let e=await this.contractWrapper.readContract.proposalVotes(t);return[{type:ne.Against,label:"Against",count:e.againstVotes},{type:ne.For,label:"For",count:e.forVotes},{type:ne.Abstain,label:"Abstain",count:e.abstainVotes}]}async hasVoted(t,e){return e||(e=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,e)}async canExecute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=pe.ethers.utils.id(e.description);try{return await this.contractWrapper.callStatic().execute(r,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:pe.ethers.utils.formatUnits(t,18)}}async balanceOfToken(t){let e=ra.IERC20__factory.connect(t,this.contractWrapper.getProvider());return await H(this.contractWrapper.getProvider(),t,await e.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,e,r,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await zt(this.contractWrapper.getProvider(),r);return{votingDelay:t.toString(),votingPeriod:e.toString(),votingTokenAddress:r,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,e){e||(e=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let r=e.map(p=>p.toAddress),a=e.map(p=>p.nativeTokenValue),n=e.map(p=>p.transactionData),s=await this.contractWrapper.sendTransaction("propose",[r,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,e,r=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,e,r])}}async execute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=pe.ethers.utils.id(e.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[r,a,n,s])}}},J=ea;c(J,"Vote"),f(J,"contractType","vote"),f(J,"contractFactory",ra.VoteERC20__factory),f(J,"schema",tn);var oa=require("@thirdweb-dev/contracts");var Ka=require("ethers");var aa=class{constructor(t,e,r,a={},n=new w(t,e,aa.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new b(this.contractWrapper,aa.schema,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new B(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],e=Ka.BigNumber.from(0),r=await this.contractWrapper.readContract.payeeCount();for(;e.lt(r);)try{let a=await this.contractWrapper.readContract.payee(e);t.push(await this.getRecipientSplitPercentage(a)),e=e.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),e={};for(let r of t)e[r.address]=await this.balanceOf(r.address);return e}async balanceOfTokenAllRecipients(t){let e=await this.getAllRecipients(),r={};for(let a of e)r[a.address]=await this.balanceOfToken(a.address,t);return r}async balanceOf(t){let e=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),r=await this.contractWrapper.readContract["totalReleased()"](),a=e.add(r);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,e){let a=await oa.IERC20__factory.connect(e,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](e),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](e,t));return await H(this.contractWrapper.getProvider(),e,i)}async getRecipientSplitPercentage(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:r.mul(Ka.BigNumber.from(1e7)).div(e).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,e){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[e,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,e,r){return e.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(r)}},Y=aa;c(Y,"Split"),f(Y,"contractType","split"),f(Y,"contractFactory",oa.Split__factory),f(Y,"schema",jo);var Fn=require("@thirdweb-dev/contracts");var Yt=require("ethers"),In=nt(require("tiny-invariant"));var Ve=require("@ethersproject/constants");var lr=class{constructor(t,e,r,a={},n=new w(t,e,lr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new b(this.contractWrapper,lr.schema,this.storage),this.roles=new O(this.contractWrapper,lr.contractRoles),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.direct=new Le(this.contractWrapper,this.storage),this.auction=new $e(this.contractWrapper,this.storage),this.events=new B(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===Ve.AddressZero)throw new yt(this.getAddress(),t.toString());switch(e.listingType){case Z.Auction:return await this.auction.mapListing(e);case Z.Direct:return await this.direct.mapListing(e);default:throw new Error(`Unknown listing type: ${e.listingType}`)}}async getActiveListings(t){let e=await this.getAllListingsNoFilter(),r=this.applyFilter(e,t),a=Yt.BigNumber.from(Math.floor(Date.now()/1e3));return r.filter(n=>n.type===Z.Auction&&Yt.BigNumber.from(n.endTimeInEpochSeconds).gt(a)&&Yt.BigNumber.from(n.startTimeInEpochSeconds).lte(a)||n.type===Z.Direct&&n.quantity>0)}async getAllListings(t){let e=await this.getAllListingsNoFilter();return this.applyFilter(e,t)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(j("lister"),Ve.AddressZero)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,e,r){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new yt(this.getAddress(),t.toString());switch(a.listingType){case Z.Direct:return(0,In.default)(e!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,e,r);case Z.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[e,Yt.BigNumber.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[Yt.BigNumber.from(t),e])}async allowListingFromSpecificAssetOnly(t){let e=[];(await this.roles.get("asset")).includes(Ve.AddressZero)&&e.push(this.encoder.encode("revokeRole",[j("asset"),Ve.AddressZero])),e.push(this.encoder.encode("grantRole",[j("asset"),t])),await this.contractWrapper.multiCall(e)}async allowListingFromAnyAsset(){let t=[],e=await this.roles.get("asset");for(let r in e)t.push(this.encoder.encode("revokeRole",[j("asset"),r]));t.push(this.encoder.encode("grantRole",[j("asset"),Ve.AddressZero])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async e=>{let r;try{r=await this.getListing(e)}catch{return}if(r.type===Z.Auction)return r;if(!!await this.direct.isStillValidListing(r))return r}))).filter(e=>e!==void 0)}applyFilter(t,e){let r=[...t],a=Yt.BigNumber.from((e==null?void 0:e.start)||0).toNumber(),n=Yt.BigNumber.from((e==null?void 0:e.count)||100).toNumber();return e&&(e.seller&&(r=r.filter(s=>{var i;return s.sellerAddress.toString().toLowerCase()===((i=e==null?void 0:e.seller)==null?void 0:i.toString().toLowerCase())})),e.tokenContract&&(r=r.filter(s=>{var i;return s.assetContractAddress.toString().toLowerCase()===((i=e==null?void 0:e.tokenContract)==null?void 0:i.toString().toLowerCase())})),e.tokenId&&(r=r.filter(s=>{var i;return s.tokenId===((i=e==null?void 0:e.tokenId)==null?void 0:i.toString())})),r=r.filter((s,i)=>i>=a),r=r.slice(0,n)),r}},V=lr;c(V,"Marketplace"),f(V,"contractType","marketplace"),f(V,"contractRoles",["admin","lister","asset"]),f(V,"contractFactory",Fn.Marketplace__factory),f(V,"schema",$o);var me=require("@thirdweb-dev/contracts");var hr=require("ethers");var ur=class{constructor(t,e,r,a={},n=new w(t,e,ur.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new b(this.contractWrapper,ur.schema,this.storage),this.roles=new O(this.contractWrapper,ur.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new B(this.contractWrapper),this.interceptor=new F(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r,a]=await Promise.all([Zt(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>hr.BigNumber.from("0"))]);return{id:hr.BigNumber.from(t).toString(),metadata:e,creator:r.creator,currentSupply:a,openStart:r.openStart.gt(0)?new Date(r.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(e=>this.get(e.toString())))}async getNFTs(t){let e=await this.contractWrapper.readContract.getPackWithRewards(t);if(!e.source)throw new ht;return(await Promise.all(e.tokenIds.map(a=>Zt(e.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:e.amountsPacked[n],metadata:a}))}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),e=Pe[t],r=me.IERC20__factory.connect(e.linkTokenAddress,this.contractWrapper.getProvider());return await H(this.contractWrapper.getProvider(),e.linkTokenAddress,await r.balanceOf(this.getAddress()))}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let p=await this.get(s.toString());return L(S({},p),{ownedByAddress:i})}))}async open(t){let e=await this.contractWrapper.sendTransaction("openPack",[t]),r=this.contractWrapper.parseLogs("PackOpenRequested",e==null?void 0:e.logs);if(r.length===0)throw new Error("Failed to open pack");let a=r[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(d=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(l,h,g,T,Tt)=>{n===g&&d({packId:l,opener:h,requestId:n,rewardContract:T,rewardIds:Tt})})}),{rewardIds:p,rewardContract:m}=i;return p.map(d=>({id:t,receipt:e,data:()=>Zt(m,this.contractWrapper.getProvider(),d.toString(),this.storage)}))}async create(t){let e=me.IERC1155__factory.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),r=await this.contractWrapper.getSignerAddress(),a=t.assets.map(h=>h.tokenId),n=t.assets.map(h=>h.amount),s=await this.storage.uploadMetadata(t.metadata),i=hr.ethers.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),m=await(await e.safeBatchTransferFrom(r,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),d=this.contractWrapper.parseLogs("PackAdded",m.logs);if(d.length===0)throw new Error("PackCreated event not found");let l=d[0].args.packId;return{id:l,receipt:m,data:()=>this.get(l.toString())}}async transfer(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,e,r,[0]])}}async transferFrom(t,e,r,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,e,r.tokenId,r.amount,a])}}async transferBatchFrom(t,e,r,a=[0]){let n=r.map(i=>i.tokenId),s=r.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,e,n,s,a])}}async setApproval(t,e=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async depositLink(t){let e=await this.contractWrapper.getChainID(),r=Pe[e];return{receipt:await(await me.IERC20__factory.connect(r.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},G=ur;c(G,"Pack"),f(G,"contractType","pack"),f(G,"contractRoles",["admin","minter","pauser","transfer"]),f(G,"contractFactory",me.Pack__factory),f(G,"schema",Go);var _n=require("@thirdweb-dev/contracts"),na=require("@ethersproject/bytes"),Xt=require("ethers");var Ge=require("ethers");var ze=class{constructor(t,e){this.contractWrapper=t,this.storage=e}async createDelayedRevealBatch(t,e,r){var Tt,gt;if(!r)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([lt.parse(t)],0,this.contractWrapper.readContract.address,await((Tt=this.contractWrapper.getSigner())==null?void 0:Tt.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(e.map(ut=>lt.parse(ut)),n.toNumber(),this.contractWrapper.readContract.address,await((gt=this.contractWrapper.getSigner())==null?void 0:gt.getAddress())),i=s.baseUri,p=await this.contractWrapper.readContract.getBaseURICount(),m=await this.contractWrapper.readContract.encryptDecrypt(Ge.ethers.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(p,r)),d=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,m]),l=this.contractWrapper.parseLogs("TokensLazyMinted",d==null?void 0:d.logs),h=l[0].args.startTokenId,g=l[0].args.endTokenId,T=[];for(let ut=h;ut.lte(g);ut=ut.add(1))T.push({id:ut,receipt:d});return T}async reveal(t,e){if(!e)throw new Error("Password is required");let r=await this.hashDelayRevealPasword(t,e);try{let a=await this.contractWrapper.callStatic().reveal(t,r);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,r])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let e=Array.from(Array(t.toNumber()).keys()),r=await Promise.all(e.map(p=>this.contractWrapper.readContract.baseURIIndices(p))),a=r.slice(0,r.length-1),n=await Promise.all(Array.from([0,...a]).map(p=>this.contractWrapper.readContract.tokenURI(p))),s=await Promise.all(Array.from([0,...a]).map(p=>this.getNftMetadata(p.toString()))),i=await Promise.all(Array.from([...r]).map(p=>this.contractWrapper.readContract.encryptedBaseURI(p)));return n.map((p,m)=>({batchId:Ge.BigNumber.from(m),batchUri:p,placeholderMetadata:s[m]})).filter((p,m)=>Ge.ethers.utils.hexDataLength(i[m])>0)}async hashDelayRevealPasword(t,e){let r=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return Ge.ethers.utils.solidityKeccak256(["string","uint256","uint256","address"],[e,r,t,a])}async getNftMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);return ce(t,e,this.storage)}};c(ze,"DelayedReveal");var fr=class extends Qt{constructor(t,e,r,a={},n=new w(t,e,fr.contractFactory.abi,a)){super(n,r,a),this.metadata=new b(this.contractWrapper,fr.schema,this.storage),this.roles=new O(this.contractWrapper,fr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ot(this.contractWrapper),this.claimConditions=new jt(this.contractWrapper,this.metadata,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new B(this.contractWrapper),this.platformFee=new U(this.contractWrapper),this.revealer=new ze(this.contractWrapper,this.storage),this.interceptor=new F(this.contractWrapper)}async getAllClaimed(t){let e=Xt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Xt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),e+r);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let e=Xt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Xt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Xt.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),e+r)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var d;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(l=>lt.parse(l)),e.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=r.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,a.endsWith("/")?a:`${a}/`,Xt.ethers.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,p=s[0].args.endTokenId,m=[];for(let l=i;l.lte(p);l=l.add(1))m.push({id:l,receipt:n,data:()=>this.getTokenMetadata(l)});return m}async claimTo(t,e,r=[(0,na.hexZeroPad)([0],32)]){let a=await this.prepareClaim(e,r),n=await this.contractWrapper.sendTransaction("claim",[t,e,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,p=i.add(e),m=[];for(let d=i;d.lt(p);d=d.add(1))m.push({id:d,receipt:n,data:()=>this.get(d)});return m}async claim(t,e=[(0,na.hexZeroPad)([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async prepareClaim(t,e=[(0,na.hexZeroPad)([0],32)]){return ke(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},z=fr;c(z,"NFTDrop"),f(z,"contractType","nft-drop"),f(z,"contractRoles",["admin","minter","transfer"]),f(z,"contractFactory",_n.DropERC721__factory),f(z,"schema",Bo);var gr={[z.contractType]:z,[q.contractType]:q,[M.contractType]:M,[Q.contractType]:Q,[K.contractType]:K,[$.contractType]:$,[J.contractType]:J,[Y.contractType]:Y,[V.contractType]:V,[G.contractType]:G},Ja={[z.contractType]:"DropERC721",[q.contractType]:"TokenERC721",[M.contractType]:"DropERC1155",[Q.contractType]:"TokenERC1155",[K.contractType]:"DropERC20",[$.contractType]:"TokenERC20",[J.contractType]:"VoteERC20",[Y.contractType]:"Split",[V.contractType]:"Marketplace",[G.contractType]:"Pack"},sa={DropERC721:z.contractType,TokenERC721:q.contractType,DropERC1155:M.contractType,TokenERC1155:Q.contractType,DropERC20:K.contractType,TokenERC20:$.contractType,VoteERC20:J.contractType,Split:Y.contractType,Marketplace:V.contractType,Pack:G.contractType};var kt=require("@thirdweb-dev/contracts");var On=A.merge(v.merge(dt).merge(D).partial()),js=I.merge(v.merge(dt).merge(D).partial()),Hs=On.merge(k.merge(st).merge(_).partial()),Dn={deploy:Hs,output:js,input:On};var ia=class{constructor(t,e,r,a,n={},s=new w(t,e,r,n)){this.storage=a,this.contractWrapper=s,this.metadata=this.detectMetadata(),this.royalties=this.detectRoyalties(),this.roles=this.detectRoles(),this.sales=this.detectPrimarySales(),this.platformFees=this.detectPlatformFees()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}detectMetadata(){if(Pt(this.contractWrapper,kt.IThirdwebContract__factory.createInterface()))return new b(this.contractWrapper,ia.schema,this.storage)}detectRoyalties(){if(Pt(this.contractWrapper,kt.IThirdwebRoyalty__factory.createInterface())){let t=new b(this.contractWrapper,ia.schema,this.storage);return new at(this.contractWrapper,t)}}detectRoles(){if(Pt(this.contractWrapper,kt.AccessControlEnumerable__factory.createInterface()))return new O(this.contractWrapper,ua)}detectPrimarySales(){if(Pt(this.contractWrapper,kt.IThirdwebPrimarySale__factory.createInterface()))return new ot(this.contractWrapper)}detectPlatformFees(){if(Pt(this.contractWrapper,kt.IThirdwebPlatformFee__factory.createInterface()))return new U(this.contractWrapper)}},te=ia;c(te,"CustomContract"),f(te,"contractType","custom"),f(te,"schema",Dn);var Ya=require("@ethersproject/constants");var yr=class extends w{constructor(t,e,r,a){super(e,t,Nn.TWFactory__factory.abi,a),this.storage=r}async deploy(t,e){var h;let r=gr[t],a=r.schema.deploy.parse(e),n=r.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((h=this.getSigner())==null?void 0:h.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),p=Ja[t];console.log(`Remote contractName : ${p}`);let m=wr.ethers.utils.formatBytes32String(p);console.log(`Deploying ${t} proxy`);let d=await this.sendTransaction("deployProxy",[m,i]);console.log(`${t} proxy deployed successfully`);let l=this.parseLogs("ProxyDeployed",d.logs);if(l.length<1)throw new Error("No ProxyDeployed event found");return l[0].args.proxy}async getDeployArguments(t,e,r){let a=await this.getDefaultTrustedForwarders();switch(e.trusted_forwarders&&e.trusted_forwarders.length>0&&(a=e.trusted_forwarders),t){case z.contractType:case q.contractType:let n=z.schema.deploy.parse(e);return[await this.getSignerAddress(),n.name,n.symbol,r,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case M.contractType:case Q.contractType:let s=M.schema.deploy.parse(e);return[await this.getSignerAddress(),s.name,s.symbol,r,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case K.contractType:case $.contractType:let i=$.schema.deploy.parse(e);return[await this.getSignerAddress(),i.name,i.symbol,r,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case J.contractType:let p=J.schema.deploy.parse(e);return[p.name,r,a,p.voting_token_address,p.voting_delay_in_blocks,p.voting_period_in_blocks,wr.BigNumber.from(p.proposal_token_threshold),p.voting_quorum_fraction];case Y.contractType:let m=Y.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,m.recipients.map(g=>g.address),m.recipients.map(g=>wr.BigNumber.from(g.sharesBps))];case V.contractType:let d=V.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,d.platform_fee_recipient,d.platform_fee_basis_points];case G.contractType:let l=G.schema.deploy.parse(e),h=Pe[await this.getChainID()];return[await this.getSignerAddress(),l.name,l.symbol,r,a,l.fee_recipient,l.seller_fee_basis_points,h.fees,h.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),e=ga.find(a=>a===t),r=e?Br[e].biconomyForwarder:Ya.AddressZero;return r!==Ya.AddressZero?[We,r]:[We]}};c(yr,"ContractFactory");var je=class extends Ot{constructor(t,e,r){super(t,e),this.storage=r}async deployNFTCollection(t){return await this.deployContract(q.contractType,t)}async deployNFTDrop(t){return await this.deployContract(z.contractType,t)}async deployEdition(t){return await this.deployContract(Q.contractType,t)}async deployEditionDrop(t){let e=M.schema.deploy.parse(t);return await this.deployContract(M.contractType,e)}async deployToken(t){return await this.deployContract($.contractType,t)}async deployTokenDrop(t){return await this.deployContract(K.contractType,t)}async deployMarketplace(t){return await this.deployContract(V.contractType,t)}async deployPack(t){return await this.deployContract(G.contractType,t)}async deploySplit(t){return await this.deployContract(Y.contractType,t)}async deployVote(t){return await this.deployContract(J.contractType,t)}async deployContract(t,e){return await(await this.getFactory()).deploy(t,e)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,e=be(t,"twRegistry");return this._registry=Promise.resolve(new nr(e,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,e=be(t,"twFactory");return this._factory=Promise.resolve(new yr(e,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,e;(t=this._factory)==null||t.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())}),(e=this._registry)==null||e.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())})}};c(je,"ContractDeployer");var Bn=require("ethers");function Xa(o,t){let e=Object.keys(o);for(let r in e){let a=o[e[r]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){Xa(a,t);continue}!n||(o[e[r]]=`ipfs://${t.splice(0,1)[0]}`)}return o}c(Xa,"replaceFilePropertiesWithHashes");function ca(o,t,e){let r=Object.keys(o);for(let a in r){let n=o[r[a]];o[r[a]]=pa(n,t,e),Array.isArray(n)&&(o[r[a]]=n.map(s=>typeof s=="object"?ca(s,t,e):pa(s,t,e))),typeof n=="object"&&ca(n,t,e)}return o}c(ca,"replaceHashWithGatewayUrl");function pa(o,t,e){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,e):o}c(pa,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=require("form-data"));var He=class{constructor(t=Ia){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,e,r){return`${await this.uploadBatch([t],0,e,r)}0`}async uploadBatch(t,e=0,r,a){let{cid:n}=await this.uploadBatchWithCid(t,e,r,a);return`ipfs://${n}/`}async getUploadToken(t){let e={"X-App-Name":`CONSOLE-TS-SDK-${t}`},r=await fetch(`${_a}/grant`,{method:"GET",headers:e});if(!r.ok)throw new fe("Failed to get upload token");return await r.text()}async get(t){let r=await(await this._get(t)).json();return ca(r,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,e,r){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,e,r);return a[0]}async uploadMetadataBatch(t,e,r,a){let n=(await this.batchUploadProperties(t)).map(d=>JSON.stringify(d)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,e,r,a),p=`ipfs://${s}/`,m=i.map(d=>`${p}${d}`);return{baseUri:p,metadataUris:m}}async _get(t){let e=t;t&&(e=pa(t,"ipfs://",this.gatewayUrl));let r=await fetch(e);if(!r.ok)throw new Error(`Status code (!= 200) =${r.status}`);return r}async batchUploadProperties(t){let e=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(e.length===0)return t;let{cid:r,fileNames:a}=await this.uploadBatchWithCid(e),n=[];for(let i of a)n.push(`${r}/${i}`);return await Xa(t,n)}buildFilePropertiesMap(t,e=[]){if(Array.isArray(t))t.forEach(r=>{this.buildFilePropertiesMap(r,e)});else if(t){let r=Object.values(t);for(let a of r)a instanceof File||a instanceof Buffer?e.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,e)}return e}async uploadBatchWithCid(t,e=0,r,a){let n=await this.getUploadToken(r||""),s={name:`CONSOLE-TS-SDK-${r}`,keyvalues:{sdk:"typescript",contractAddress:r,signerAddress:a}},i=new FormData,p=[];t.forEach((l,h)=>{let g="",T=l;if(l instanceof File){let gt="";if(l.name){let ut=l.name.lastIndexOf(".");ut>-1&&(gt=l.name.substring(ut))}g=`${h+e}${gt}`}else l instanceof Buffer||typeof l=="string"?g=`${h+e}`:l&&l.name&&(l==null?void 0:l.data)?(T=l==null?void 0:l.data,g=`${l.name}`):g=`${h+e}`;let Tt=`files/${g}`;if(p.indexOf(g)>-1)throw new he(g);p.push(g),typeof window>"u"?i.append("file",T,{filepath:Tt}):i.append("file",new Blob([T]),Tt)}),i.append("pinataMetadata",JSON.stringify(s));let m=await fetch(Oa,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),d=await m.json();if(!m.ok)throw console.log(d),new ue("Failed to upload files to IPFS");return{cid:d.IpfsHash,fileNames:p}}};c(He,"IpfsStorage");var Mn=require("@thirdweb-dev/contracts");var Ln=nt(require("tiny-invariant"));var ma=class extends Ot{contractCache=new Map;constructor(t,e={},r=new He){super(t,e),this.storage=r,this.deployer=new je(t,e,r)}getNFTDrop(t){return this.getContract(t,z.contractType)}getNFTCollection(t){return this.getContract(t,q.contractType)}getEditionDrop(t){return this.getContract(t,M.contractType)}getEdition(t){return this.getContract(t,Q.contractType)}getTokenDrop(t){return this.getContract(t,K.contractType)}getToken(t){return this.getContract(t,$.contractType)}getVote(t){return this.getContract(t,J.contractType)}getSplit(t){return this.getContract(t,Y.contractType)}getMarketplace(t){return this.getContract(t,V.contractType)}getPack(t){return this.getContract(t,G.contractType)}getContract(t,e){if(this.contractCache.has(t))return this.contractCache.get(t);let r=new gr[e](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,r),r}async resolveContractType(t){let e=Mn.IThirdwebContract__factory.connect(t,this.getSignerOrProvider()),r=Bn.ethers.utils.toUtf8String(await e.contractType()).replace(/\x00/g,"");return(0,Ln.default)(r in sa,`${r} is not a valid contract type, falling back to custom contract`),sa[r]}async getContractList(t){let e=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(e.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}async unstable_getCustomContract(t,e){return new te(this.getSignerOrProvider(),t,e,this.storage,this.options)}};c(ma,"ThirdwebSDK");0&&(module.exports={ALL_ROLES,AdminRoleMissingError,AssetNotFoundError,AuctionAlreadyStartedError,AuctionHasNotEndedError,BaseSignaturePayloadInput,CONTRACTS_MAP,CONTRACT_ADDRESSES,ChainId,ChainlinkVrf,ClaimConditionInputArray,ClaimConditionInputSchema,ClaimConditionOutputSchema,ClaimEligibility,CommonContractOutputSchema,CommonContractSchema,CommonPlatformFeeSchema,CommonPrimarySaleSchema,CommonRoyaltySchema,CommonSymbolSchema,CommonTrustedForwarderSchema,ContractDeployer,ContractEncoder,ContractEvents,ContractInterceptor,ContractMetadata,ContractPlatformFee,ContractPrimarySale,ContractRoles,ContractRoyalty,CurrencySchema,CurrencyValueSchema,CustomContract,DEFAULT_IPFS_GATEWAY,DEFAULT_QUERY_ALL_COUNT,DelayedReveal,DropClaimConditions,DropErc1155ClaimConditions,DropErc1155History,DuplicateFileNameError,DuplicateLeafsError,Edition,EditionDrop,EditionMetadataInputOrUriSchema,EditionMetadataInputSchema,EditionMetadataOutputSchema,EditionMetadataWithOwnerOutputSchema,Erc1155,Erc1155SignatureMinting,Erc20,Erc20SignatureMinting,Erc721,Erc721SignatureMinting,EventType,FetchError,FileNameMissingError,FunctionDeprecatedError,GasCostEstimator,InterfaceId_IERC1155,InterfaceId_IERC721,InvalidAddressError,IpfsStorage,ListingNotFoundError,ListingType,Marketplace,MarketplaceAuction,MarketplaceDirect,MerkleSchema,MintRequest1155,MintRequest20,MintRequest721,MissingOwnerRoleError,MissingRoleError,NATIVE_TOKENS,NATIVE_TOKEN_ADDRESS,NFTCollection,NFTDrop,NotEnoughTokensError,NotFoundError,OZ_DEFENDER_FORWARDER_ADDRESS,OptionalPropertiesInput,OptionalPropertiesOutput,PINATA_IPFS_URL,Pack,PartialClaimConditionInputSchema,ProposalState,QuantityAboveLimitError,REMOTE_CONTRACT_NAME,REMOTE_CONTRACT_TO_CONTRACT_TYPE,RestrictedTransferError,SUPPORTED_CHAIN_IDS,Signature1155PayloadInput,Signature1155PayloadOutput,Signature20PayloadInput,Signature20PayloadOutput,Signature721PayloadInput,Signature721PayloadOutput,SnapshotAddressInput,SnapshotInfoSchema,SnapshotInputSchema,SnapshotSchema,Split,TW_IPFS_SERVER_URL,ThirdwebSDK,Token,TokenDrop,TokenERC20History,TokenMintInputSchema,TransactionError,UnderlyingType,UploadError,Vote,VoteType,WrongListingTypeError,convertToTWError,createSnapshot,getContractAddressByChainId,getNativeTokenByChainId,getRoleHash,hashLeafNode,includesErrorMessage});
//# sourceMappingURL=index.js.map