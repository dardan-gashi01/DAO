import { NetworkOrSignerOrProvider, TransactionResultWithId } from "../types";
import { SDKOptions } from "../../schema/sdk-options";
import { IStorage } from "../interfaces";
import { RPCConnectionHandler } from "./rpc-connection-handler";
import { BytesLike, ContractInterface } from "ethers";
import { ContractParam, PublishedContract } from "../../schema/contracts/custom";
/**
 * Handles publishing contracts (EXPERIMENTAL)
 * @internal
 */
export declare class ContractPublisher extends RPCConnectionHandler {
    private storage;
    private registry;
    constructor(network: NetworkOrSignerOrProvider, options: SDKOptions, storage: IStorage);
    /**
     * @internal
     * @param metadataUri
     */
    extractConstructorParams(metadataUri: string): Promise<ContractParam[]>;
    /**
     * @internal
     * @param metadataUri
     */
    fetchFullContractMetadata(metadataUri: string): Promise<{
        name: string;
        abi: {
            type: string;
            inputs: {
                type: string;
                name: string;
            }[];
        }[];
        bytecode: string;
    }>;
    getAll(publisherAddress: string): Promise<PublishedContract[]>;
    get(publisherAddress: string, metadataUri: string): Promise<PublishedContract>;
    publish(metadataUri: string): Promise<TransactionResultWithId<PublishedContract>>;
    /**
     * @internal
     * @param contract
     * @param constructorParamValues
     */
    deployCustomContract(contract: PublishedContract, constructorParamValues: any[]): Promise<string>;
    /**
     * @internal
     * @param abi
     * @param bytecode
     * @param constructorParams
     */
    deployCustomContractWithAbi(abi: ContractInterface, bytecode: BytesLike | {
        object: string;
    }, constructorParams: Array<any>): Promise<string>;
}
